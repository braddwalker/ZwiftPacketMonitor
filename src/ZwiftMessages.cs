// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: zwiftMessages.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ZwiftPacketMonitor {

  /// <summary>Holder for reflection information generated from zwiftMessages.proto</summary>
  public static partial class ZwiftMessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for zwiftMessages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ZwiftMessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChN6d2lmdE1lc3NhZ2VzLnByb3RvEhJad2lmdFBhY2tldE1vbml0b3IikAYK",
            "Bk1lZXR1cBIKCgJpZBgBIAEoBRIMCgR0YWcyGAIgASgFEgwKBG5hbWUYAyAB",
            "KAkSEwoLZGVzY3JpcHRpb24YBCABKAkSEgoKc3RhcnRfdGltZRgFIAEoAxIQ",
            "CghkaXN0YW5jZRgHIAEoBxIMCgR0YWc4GAggASgFEjwKDG1lZXR1cF9pbm5l",
            "chgKIAEoCzImLlp3aWZ0UGFja2V0TW9uaXRvci5NZWV0dXAuTWVldHVwSW5u",
            "ZXISEQoJdGh1bWJuYWlsGAwgASgJEhAKCGR1cmF0aW9uGA0gASgFEgsKA2Yx",
            "NBgOIAEoAxILCgNmMTcYESABKAUSCwoDZjE4GBIgASgFEgsKA2YyMhgWIAEo",
            "BRILCgNmMjMYFyABKAUSGAoQbWVldHVwX29ubHlfdmlldxgYIAEoBRILCgNm",
            "MjUYGSABKAUSCwoDZjI3GBsgASgFEgsKA2YyOBgcIAEoBRILCgNmMjkYHSAB",
            "KAUSCwoDZjM0GCIgASgFEgsKA2YzNRgjIAEoBRqIAwoLTWVldHVwSW5uZXIS",
            "CgoCaWQYASABKAUSDAoEbmFtZRgCIAEoCRITCgtkZXNjcmlwdGlvbhgDIAEo",
            "CRIKCgJmNxgHIAEoCRIKCgJmOBgIIAEoAxIKCgJmORgJIAEoAxILCgNmMTAY",
            "CiABKAMSCwoDZjExGAsgASgDEgsKA2YxMhgMIAEoAxILCgNmMTMYDSABKAMS",
            "CwoDZjE0GA4gASgDEgsKA2YxNRgPIAEoAxILCgNmMTYYECABKAMSCwoDZjE3",
            "GBEgASgDEgsKA2YxOBgSIAEoAxILCgNmMjIYFiABKAMSEAoIZGlzdGFuY2UY",
            "GCABKAcSCwoDZjI1GBkgASgDEgsKA2YyORgdIAEoBRILCgNmMzAYHiABKAUS",
            "CwoDZjMxGB8gASgFEgsKA2YzMhggIAEoBxILCgNmMzMYISABKAcSEAoIZHVy",
            "YXRpb24YIiABKAUSCwoDZjQyGCogASgDEgsKA2Y0NBgsIAEoAxILCgNmNDYY",
            "LiABKAUSCwoDZjQ3GC8gASgFItMDCgtQbGF5ZXJTdGF0ZRIKCgJpZBgBIAEo",
            "BRIRCgl3b3JsZFRpbWUYAiABKAMSEAoIZGlzdGFuY2UYAyABKAUSEAoIcm9h",
            "ZFRpbWUYBCABKAUSDAoEbGFwcxgFIAEoBRINCgVzcGVlZBgGIAEoBRIUCgxy",
            "b2FkUG9zaXRpb24YCCABKAUSEgoKY2FkZW5jZVVIehgJIAEoBRIRCgloZWFy",
            "dHJhdGUYCyABKAUSDQoFcG93ZXIYDCABKAUSDwoHaGVhZGluZxgNIAEoAxIM",
            "CgRsZWFuGA4gASgFEhAKCGNsaW1iaW5nGA8gASgFEgwKBHRpbWUYECABKAUS",
            "CwoDZjE5GBMgASgFEgsKA2YyMBgUIAEoBRIQCghwcm9ncmVzcxgVIAEoBRIX",
            "Cg9jdXN0b21pc2F0aW9uSWQYFiABKAMSFAoManVzdFdhdGNoaW5nGBcgASgF",
            "EhAKCGNhbG9yaWVzGBggASgFEgkKAXgYGSABKAISEAoIYWx0aXR1ZGUYGiAB",
            "KAISCQoBeRgbIAEoAhIXCg93YXRjaGluZ1JpZGVySWQYHCABKAUSDwoHZ3Jv",
            "dXBJZBgdIAEoBRINCgVzcG9ydBgfIAEoAxILCgNmMzQYIiABKAIi5AEKDkNs",
            "aWVudFRvU2VydmVyEhEKCWNvbm5lY3RlZBgBIAEoBRIQCghyaWRlcl9pZBgC",
            "IAEoBRISCgp3b3JsZF90aW1lGAMgASgDEi4KBXN0YXRlGAcgASgLMh8uWndp",
            "ZnRQYWNrZXRNb25pdG9yLlBsYXllclN0YXRlEg0KBXNlcW5vGAQgASgFEgwK",
            "BHRhZzgYCCABKAMSDAoEdGFnORgJIAEoAxITCgtsYXN0X3VwZGF0ZRgKIAEo",
            "AxINCgV0YWcxMRgLIAEoAxIaChJsYXN0X3BsYXllcl91cGRhdGUYDCABKAMi",
            "EQoPVW5rbm93bk1lc3NhZ2UxIhAKDlVua25vd25NZXNzYWdlIssBCgxQbGF5",
            "ZXJVcGRhdGUSDAoEdGFnMRgBIAEoAxIMCgR0YWcyGAIgASgFEgwKBHRhZzMY",
            "AyABKAUSDwoHcGF5bG9hZBgEIAEoDBIMCgR0YWc1GAUgASgDEgwKBHRhZzYY",
            "BiABKAMSDAoEdGFnNxgHIAEoAxIMCgR0YWc4GAggASgDEgwKBHRhZzkYCSAB",
            "KAMSDQoFdGFnMTEYCyABKAMSDQoFdGFnMTIYDCABKAMSDQoFdGFnMTQYDiAB",
            "KAMSDQoFdGFnMTUYDyABKAMi9gEKClBheWxvYWQxMDUSCgoCZjEYASABKAMS",
            "EAoIcmlkZXJfaWQYAiABKAUSCgoCZjMYAyABKAUSCgoCZjQYBCABKAMSCgoC",
            "ZjUYBSABKAMSCgoCZjYYBiABKAMSEQoJZmlyc3ROYW1lGAcgASgJEhAKCGxh",
            "c3ROYW1lGAggASgJEgoKAmY5GAkgASgDEgsKA2YxMRgLIAEoAxILCgNmMTIY",
            "DCABKAUSCwoDZjEzGA0gASgFEgsKA2YxNBgOIAEoBRILCgNmMTUYDyABKAUS",
            "CwoDZjE2GBAgASgFEg4KBmY3ZGF0ZRgRIAEoCRILCgNmMTkYEyABKAUirwEK",
            "CFBheWxvYWQ1EhAKCHJpZGVyX2lkGAEgASgFEhMKC3RvX3JpZGVyX2lkGAIg",
            "ASgFEgoKAmYzGAMgASgFEhEKCWZpcnN0TmFtZRgEIAEoCRIQCghsYXN0TmFt",
            "ZRgFIAEoCRIPCgdtZXNzYWdlGAYgASgJEg4KBmF2YXRhchgHIAEoCRITCgtj",
            "b3VudHJ5Q29kZRgIIAEoBRIVCg1ldmVudFN1Ymdyb3VwGAsgASgFImsKCFBh",
            "eWxvYWQ0EhAKCHJpZGVyX2lkGAEgASgFEhMKC3RvX3JpZGVyX2lkGAIgASgF",
            "EhEKCWZpcnN0TmFtZRgDIAEoCRIQCghsYXN0TmFtZRgEIAEoCRITCgtjb3Vu",
            "dHJ5Q29kZRgFIAEoBSIiCghQYXlsb2FkMhIKCgJmMRgBIAEoBRIKCgJmMhgC",
            "IAEoAyIuCghQYXlsb2FkMxIKCgJmMRgBIAEoBRIKCgJmMhgCIAEoAxIKCgJm",
            "MxgDIAEoBSIMCgpQYXlsb2FkMTEwIgwKClBheWxvYWQxMDkisQEKDkV2ZW50",
            "UG9zaXRpb25zEhAKCHBvc2l0aW9uGAEgASgFElEKEmV2ZW50UmlkZXJQb3Np",
            "dGlvbhgEIAMoCzI1Llp3aWZ0UGFja2V0TW9uaXRvci5FdmVudFBvc2l0aW9u",
            "cy5FdmVudFJpZGVyUG9zaXRpb24SEgoKbnVtX3JpZGVycxh0IAEoBRomChJF",
            "dmVudFJpZGVyUG9zaXRpb24SEAoIcmlkZXJfaWQYASABKAUiwgIKDlNlcnZl",
            "clRvQ2xpZW50EgwKBHRhZzEYASABKAUSEAoIcmlkZXJfaWQYAiABKAUSEgoK",
            "d29ybGRfdGltZRgDIAEoAxINCgVzZXFubxgEIAEoBRI2Cg1wbGF5ZXJfc3Rh",
            "dGVzGAggAygLMh8uWndpZnRQYWNrZXRNb25pdG9yLlBsYXllclN0YXRlEjgK",
            "DnBsYXllcl91cGRhdGVzGAkgAygLMiAuWndpZnRQYWNrZXRNb25pdG9yLlBs",
            "YXllclVwZGF0ZRINCgV0YWcxMRgLIAEoAxINCgV0YWcxNxgRIAEoAxIQCghu",
            "dW1fbXNncxgSIAEoBRIOCgZtc2dudW0YEyABKAUSOwoPZXZlbnRfcG9zaXRp",
            "b25zGBcgASgLMiIuWndpZnRQYWNrZXRNb25pdG9yLkV2ZW50UG9zaXRpb25z",
            "InUKD1dvcmxkQXR0cmlidXRlcxIQCgh3b3JsZF9pZBgBIAEoBRIMCgRuYW1l",
            "GAIgASgJEgwKBHRhZzMYAyABKAMSDAoEdGFnNRgEIAEoAxISCgp3b3JsZF90",
            "aW1lGAYgASgDEhIKCmNsb2NrX3RpbWUYByABKAMiJAoOV29ybGRBdHRyaWJ1",
            "dGUSEgoKd29ybGRfdGltZRgCIAEoAyKpAQoVRXZlbnRTdWJncm91cFByb3Rv",
            "YnVmEgoKAmlkGAEgASgFEgwKBG5hbWUYAiABKAkSDQoFcnVsZXMYCCABKAUS",
            "DQoFcm91dGUYFiABKAUSDAoEbGFwcxgZIAEoBRIVCg1zdGFydExvY2F0aW9u",
            "GB0gASgFEg0KBWxhYmVsGB4gASgFEhAKCHBhY2VUeXBlGB8gASgFEhIKCmpl",
            "cnNleUhhc2gYJCABKAUihAIKD1JpZGVyQXR0cmlidXRlcxIKCgJmMhgCIAEo",
            "BRIKCgJmMxgDIAEoBRJOChBhdHRyaWJ1dGVNZXNzYWdlGAQgASgLMjQuWndp",
            "ZnRQYWNrZXRNb25pdG9yLlJpZGVyQXR0cmlidXRlcy5BdHRyaWJ1dGVNZXNz",
            "YWdlEg8KB3RoZWlySWQYCiABKAUSCwoDZjEzGA0gASgFGmsKEEF0dHJpYnV0",
            "ZU1lc3NhZ2USDAoEbXlJZBgBIAEoBRIPCgd0aGVpcklkGAIgASgFEhEKCWZp",
            "cnN0TmFtZRgDIAEoCRIQCghsYXN0TmFtZRgEIAEoCRITCgtjb3VudHJ5Q29k",
            "ZRgFIAEoBWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.Meetup), global::ZwiftPacketMonitor.Meetup.Parser, new[]{ "Id", "Tag2", "Name", "Description", "StartTime", "Distance", "Tag8", "MeetupInner", "Thumbnail", "Duration", "F14", "F17", "F18", "F22", "F23", "MeetupOnlyView", "F25", "F27", "F28", "F29", "F34", "F35" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.Meetup.Types.MeetupInner), global::ZwiftPacketMonitor.Meetup.Types.MeetupInner.Parser, new[]{ "Id", "Name", "Description", "F7", "F8", "F9", "F10", "F11", "F12", "F13", "F14", "F15", "F16", "F17", "F18", "F22", "Distance", "F25", "F29", "F30", "F31", "F32", "F33", "Duration", "F42", "F44", "F46", "F47" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.PlayerState), global::ZwiftPacketMonitor.PlayerState.Parser, new[]{ "Id", "WorldTime", "Distance", "RoadTime", "Laps", "Speed", "RoadPosition", "CadenceUHz", "Heartrate", "Power", "Heading", "Lean", "Climbing", "Time", "F19", "F20", "Progress", "CustomisationId", "JustWatching", "Calories", "X", "Altitude", "Y", "WatchingRiderId", "GroupId", "Sport", "F34" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.ClientToServer), global::ZwiftPacketMonitor.ClientToServer.Parser, new[]{ "Connected", "RiderId", "WorldTime", "State", "Seqno", "Tag8", "Tag9", "LastUpdate", "Tag11", "LastPlayerUpdate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.UnknownMessage1), global::ZwiftPacketMonitor.UnknownMessage1.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.UnknownMessage), global::ZwiftPacketMonitor.UnknownMessage.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.PlayerUpdate), global::ZwiftPacketMonitor.PlayerUpdate.Parser, new[]{ "Tag1", "Tag2", "Tag3", "Payload", "Tag5", "Tag6", "Tag7", "Tag8", "Tag9", "Tag11", "Tag12", "Tag14", "Tag15" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.Payload105), global::ZwiftPacketMonitor.Payload105.Parser, new[]{ "F1", "RiderId", "F3", "F4", "F5", "F6", "FirstName", "LastName", "F9", "F11", "F12", "F13", "F14", "F15", "F16", "F7Date", "F19" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.Payload5), global::ZwiftPacketMonitor.Payload5.Parser, new[]{ "RiderId", "ToRiderId", "F3", "FirstName", "LastName", "Message", "Avatar", "CountryCode", "EventSubgroup" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.Payload4), global::ZwiftPacketMonitor.Payload4.Parser, new[]{ "RiderId", "ToRiderId", "FirstName", "LastName", "CountryCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.Payload2), global::ZwiftPacketMonitor.Payload2.Parser, new[]{ "F1", "F2" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.Payload3), global::ZwiftPacketMonitor.Payload3.Parser, new[]{ "F1", "F2", "F3" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.Payload110), global::ZwiftPacketMonitor.Payload110.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.Payload109), global::ZwiftPacketMonitor.Payload109.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.EventPositions), global::ZwiftPacketMonitor.EventPositions.Parser, new[]{ "Position", "EventRiderPosition", "NumRiders" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.EventPositions.Types.EventRiderPosition), global::ZwiftPacketMonitor.EventPositions.Types.EventRiderPosition.Parser, new[]{ "RiderId" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.ServerToClient), global::ZwiftPacketMonitor.ServerToClient.Parser, new[]{ "Tag1", "RiderId", "WorldTime", "Seqno", "PlayerStates", "PlayerUpdates", "Tag11", "Tag17", "NumMsgs", "Msgnum", "EventPositions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.WorldAttributes), global::ZwiftPacketMonitor.WorldAttributes.Parser, new[]{ "WorldId", "Name", "Tag3", "Tag5", "WorldTime", "ClockTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.WorldAttribute), global::ZwiftPacketMonitor.WorldAttribute.Parser, new[]{ "WorldTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.EventSubgroupProtobuf), global::ZwiftPacketMonitor.EventSubgroupProtobuf.Parser, new[]{ "Id", "Name", "Rules", "Route", "Laps", "StartLocation", "Label", "PaceType", "JerseyHash" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.RiderAttributes), global::ZwiftPacketMonitor.RiderAttributes.Parser, new[]{ "F2", "F3", "AttributeMessage", "TheirId", "F13" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::ZwiftPacketMonitor.RiderAttributes.Types.AttributeMessage), global::ZwiftPacketMonitor.RiderAttributes.Types.AttributeMessage.Parser, new[]{ "MyId", "TheirId", "FirstName", "LastName", "CountryCode" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Meetup : pb::IMessage<Meetup>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Meetup> _parser = new pb::MessageParser<Meetup>(() => new Meetup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Meetup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Meetup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Meetup(Meetup other) : this() {
      id_ = other.id_;
      tag2_ = other.tag2_;
      name_ = other.name_;
      description_ = other.description_;
      startTime_ = other.startTime_;
      distance_ = other.distance_;
      tag8_ = other.tag8_;
      meetupInner_ = other.meetupInner_ != null ? other.meetupInner_.Clone() : null;
      thumbnail_ = other.thumbnail_;
      duration_ = other.duration_;
      f14_ = other.f14_;
      f17_ = other.f17_;
      f18_ = other.f18_;
      f22_ = other.f22_;
      f23_ = other.f23_;
      meetupOnlyView_ = other.meetupOnlyView_;
      f25_ = other.f25_;
      f27_ = other.f27_;
      f28_ = other.f28_;
      f29_ = other.f29_;
      f34_ = other.f34_;
      f35_ = other.f35_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Meetup Clone() {
      return new Meetup(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "tag2" field.</summary>
    public const int Tag2FieldNumber = 2;
    private int tag2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tag2 {
      get { return tag2_; }
      set {
        tag2_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 5;
    private long startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "distance" field.</summary>
    public const int DistanceFieldNumber = 7;
    private uint distance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Distance {
      get { return distance_; }
      set {
        distance_ = value;
      }
    }

    /// <summary>Field number for the "tag8" field.</summary>
    public const int Tag8FieldNumber = 8;
    private int tag8_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tag8 {
      get { return tag8_; }
      set {
        tag8_ = value;
      }
    }

    /// <summary>Field number for the "meetup_inner" field.</summary>
    public const int MeetupInnerFieldNumber = 10;
    private global::ZwiftPacketMonitor.Meetup.Types.MeetupInner meetupInner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ZwiftPacketMonitor.Meetup.Types.MeetupInner MeetupInner {
      get { return meetupInner_; }
      set {
        meetupInner_ = value;
      }
    }

    /// <summary>Field number for the "thumbnail" field.</summary>
    public const int ThumbnailFieldNumber = 12;
    private string thumbnail_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Thumbnail {
      get { return thumbnail_; }
      set {
        thumbnail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 13;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "f14" field.</summary>
    public const int F14FieldNumber = 14;
    private long f14_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long F14 {
      get { return f14_; }
      set {
        f14_ = value;
      }
    }

    /// <summary>Field number for the "f17" field.</summary>
    public const int F17FieldNumber = 17;
    private int f17_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F17 {
      get { return f17_; }
      set {
        f17_ = value;
      }
    }

    /// <summary>Field number for the "f18" field.</summary>
    public const int F18FieldNumber = 18;
    private int f18_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F18 {
      get { return f18_; }
      set {
        f18_ = value;
      }
    }

    /// <summary>Field number for the "f22" field.</summary>
    public const int F22FieldNumber = 22;
    private int f22_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F22 {
      get { return f22_; }
      set {
        f22_ = value;
      }
    }

    /// <summary>Field number for the "f23" field.</summary>
    public const int F23FieldNumber = 23;
    private int f23_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F23 {
      get { return f23_; }
      set {
        f23_ = value;
      }
    }

    /// <summary>Field number for the "meetup_only_view" field.</summary>
    public const int MeetupOnlyViewFieldNumber = 24;
    private int meetupOnlyView_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MeetupOnlyView {
      get { return meetupOnlyView_; }
      set {
        meetupOnlyView_ = value;
      }
    }

    /// <summary>Field number for the "f25" field.</summary>
    public const int F25FieldNumber = 25;
    private int f25_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F25 {
      get { return f25_; }
      set {
        f25_ = value;
      }
    }

    /// <summary>Field number for the "f27" field.</summary>
    public const int F27FieldNumber = 27;
    private int f27_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F27 {
      get { return f27_; }
      set {
        f27_ = value;
      }
    }

    /// <summary>Field number for the "f28" field.</summary>
    public const int F28FieldNumber = 28;
    private int f28_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F28 {
      get { return f28_; }
      set {
        f28_ = value;
      }
    }

    /// <summary>Field number for the "f29" field.</summary>
    public const int F29FieldNumber = 29;
    private int f29_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F29 {
      get { return f29_; }
      set {
        f29_ = value;
      }
    }

    /// <summary>Field number for the "f34" field.</summary>
    public const int F34FieldNumber = 34;
    private int f34_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F34 {
      get { return f34_; }
      set {
        f34_ = value;
      }
    }

    /// <summary>Field number for the "f35" field.</summary>
    public const int F35FieldNumber = 35;
    private int f35_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F35 {
      get { return f35_; }
      set {
        f35_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Meetup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Meetup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Tag2 != other.Tag2) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (StartTime != other.StartTime) return false;
      if (Distance != other.Distance) return false;
      if (Tag8 != other.Tag8) return false;
      if (!object.Equals(MeetupInner, other.MeetupInner)) return false;
      if (Thumbnail != other.Thumbnail) return false;
      if (Duration != other.Duration) return false;
      if (F14 != other.F14) return false;
      if (F17 != other.F17) return false;
      if (F18 != other.F18) return false;
      if (F22 != other.F22) return false;
      if (F23 != other.F23) return false;
      if (MeetupOnlyView != other.MeetupOnlyView) return false;
      if (F25 != other.F25) return false;
      if (F27 != other.F27) return false;
      if (F28 != other.F28) return false;
      if (F29 != other.F29) return false;
      if (F34 != other.F34) return false;
      if (F35 != other.F35) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Tag2 != 0) hash ^= Tag2.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (Distance != 0) hash ^= Distance.GetHashCode();
      if (Tag8 != 0) hash ^= Tag8.GetHashCode();
      if (meetupInner_ != null) hash ^= MeetupInner.GetHashCode();
      if (Thumbnail.Length != 0) hash ^= Thumbnail.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (F14 != 0L) hash ^= F14.GetHashCode();
      if (F17 != 0) hash ^= F17.GetHashCode();
      if (F18 != 0) hash ^= F18.GetHashCode();
      if (F22 != 0) hash ^= F22.GetHashCode();
      if (F23 != 0) hash ^= F23.GetHashCode();
      if (MeetupOnlyView != 0) hash ^= MeetupOnlyView.GetHashCode();
      if (F25 != 0) hash ^= F25.GetHashCode();
      if (F27 != 0) hash ^= F27.GetHashCode();
      if (F28 != 0) hash ^= F28.GetHashCode();
      if (F29 != 0) hash ^= F29.GetHashCode();
      if (F34 != 0) hash ^= F34.GetHashCode();
      if (F35 != 0) hash ^= F35.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Tag2 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Tag2);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(StartTime);
      }
      if (Distance != 0) {
        output.WriteRawTag(61);
        output.WriteFixed32(Distance);
      }
      if (Tag8 != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Tag8);
      }
      if (meetupInner_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(MeetupInner);
      }
      if (Thumbnail.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Thumbnail);
      }
      if (Duration != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Duration);
      }
      if (F14 != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(F14);
      }
      if (F17 != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(F17);
      }
      if (F18 != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(F18);
      }
      if (F22 != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(F22);
      }
      if (F23 != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(F23);
      }
      if (MeetupOnlyView != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(MeetupOnlyView);
      }
      if (F25 != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(F25);
      }
      if (F27 != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(F27);
      }
      if (F28 != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(F28);
      }
      if (F29 != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(F29);
      }
      if (F34 != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(F34);
      }
      if (F35 != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(F35);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Tag2 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Tag2);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(StartTime);
      }
      if (Distance != 0) {
        output.WriteRawTag(61);
        output.WriteFixed32(Distance);
      }
      if (Tag8 != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Tag8);
      }
      if (meetupInner_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(MeetupInner);
      }
      if (Thumbnail.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Thumbnail);
      }
      if (Duration != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Duration);
      }
      if (F14 != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(F14);
      }
      if (F17 != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(F17);
      }
      if (F18 != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(F18);
      }
      if (F22 != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(F22);
      }
      if (F23 != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(F23);
      }
      if (MeetupOnlyView != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(MeetupOnlyView);
      }
      if (F25 != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(F25);
      }
      if (F27 != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(F27);
      }
      if (F28 != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(F28);
      }
      if (F29 != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(F29);
      }
      if (F34 != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(F34);
      }
      if (F35 != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(F35);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Tag2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tag2);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (Distance != 0) {
        size += 1 + 4;
      }
      if (Tag8 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tag8);
      }
      if (meetupInner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MeetupInner);
      }
      if (Thumbnail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Thumbnail);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (F14 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(F14);
      }
      if (F17 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(F17);
      }
      if (F18 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(F18);
      }
      if (F22 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(F22);
      }
      if (F23 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(F23);
      }
      if (MeetupOnlyView != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MeetupOnlyView);
      }
      if (F25 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(F25);
      }
      if (F27 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(F27);
      }
      if (F28 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(F28);
      }
      if (F29 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(F29);
      }
      if (F34 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(F34);
      }
      if (F35 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(F35);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Meetup other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Tag2 != 0) {
        Tag2 = other.Tag2;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.Distance != 0) {
        Distance = other.Distance;
      }
      if (other.Tag8 != 0) {
        Tag8 = other.Tag8;
      }
      if (other.meetupInner_ != null) {
        if (meetupInner_ == null) {
          MeetupInner = new global::ZwiftPacketMonitor.Meetup.Types.MeetupInner();
        }
        MeetupInner.MergeFrom(other.MeetupInner);
      }
      if (other.Thumbnail.Length != 0) {
        Thumbnail = other.Thumbnail;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.F14 != 0L) {
        F14 = other.F14;
      }
      if (other.F17 != 0) {
        F17 = other.F17;
      }
      if (other.F18 != 0) {
        F18 = other.F18;
      }
      if (other.F22 != 0) {
        F22 = other.F22;
      }
      if (other.F23 != 0) {
        F23 = other.F23;
      }
      if (other.MeetupOnlyView != 0) {
        MeetupOnlyView = other.MeetupOnlyView;
      }
      if (other.F25 != 0) {
        F25 = other.F25;
      }
      if (other.F27 != 0) {
        F27 = other.F27;
      }
      if (other.F28 != 0) {
        F28 = other.F28;
      }
      if (other.F29 != 0) {
        F29 = other.F29;
      }
      if (other.F34 != 0) {
        F34 = other.F34;
      }
      if (other.F35 != 0) {
        F35 = other.F35;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Tag2 = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 40: {
            StartTime = input.ReadInt64();
            break;
          }
          case 61: {
            Distance = input.ReadFixed32();
            break;
          }
          case 64: {
            Tag8 = input.ReadInt32();
            break;
          }
          case 82: {
            if (meetupInner_ == null) {
              MeetupInner = new global::ZwiftPacketMonitor.Meetup.Types.MeetupInner();
            }
            input.ReadMessage(MeetupInner);
            break;
          }
          case 98: {
            Thumbnail = input.ReadString();
            break;
          }
          case 104: {
            Duration = input.ReadInt32();
            break;
          }
          case 112: {
            F14 = input.ReadInt64();
            break;
          }
          case 136: {
            F17 = input.ReadInt32();
            break;
          }
          case 144: {
            F18 = input.ReadInt32();
            break;
          }
          case 176: {
            F22 = input.ReadInt32();
            break;
          }
          case 184: {
            F23 = input.ReadInt32();
            break;
          }
          case 192: {
            MeetupOnlyView = input.ReadInt32();
            break;
          }
          case 200: {
            F25 = input.ReadInt32();
            break;
          }
          case 216: {
            F27 = input.ReadInt32();
            break;
          }
          case 224: {
            F28 = input.ReadInt32();
            break;
          }
          case 232: {
            F29 = input.ReadInt32();
            break;
          }
          case 272: {
            F34 = input.ReadInt32();
            break;
          }
          case 280: {
            F35 = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Tag2 = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 40: {
            StartTime = input.ReadInt64();
            break;
          }
          case 61: {
            Distance = input.ReadFixed32();
            break;
          }
          case 64: {
            Tag8 = input.ReadInt32();
            break;
          }
          case 82: {
            if (meetupInner_ == null) {
              MeetupInner = new global::ZwiftPacketMonitor.Meetup.Types.MeetupInner();
            }
            input.ReadMessage(MeetupInner);
            break;
          }
          case 98: {
            Thumbnail = input.ReadString();
            break;
          }
          case 104: {
            Duration = input.ReadInt32();
            break;
          }
          case 112: {
            F14 = input.ReadInt64();
            break;
          }
          case 136: {
            F17 = input.ReadInt32();
            break;
          }
          case 144: {
            F18 = input.ReadInt32();
            break;
          }
          case 176: {
            F22 = input.ReadInt32();
            break;
          }
          case 184: {
            F23 = input.ReadInt32();
            break;
          }
          case 192: {
            MeetupOnlyView = input.ReadInt32();
            break;
          }
          case 200: {
            F25 = input.ReadInt32();
            break;
          }
          case 216: {
            F27 = input.ReadInt32();
            break;
          }
          case 224: {
            F28 = input.ReadInt32();
            break;
          }
          case 232: {
            F29 = input.ReadInt32();
            break;
          }
          case 272: {
            F34 = input.ReadInt32();
            break;
          }
          case 280: {
            F35 = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Meetup message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class MeetupInner : pb::IMessage<MeetupInner>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<MeetupInner> _parser = new pb::MessageParser<MeetupInner>(() => new MeetupInner());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MeetupInner> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::ZwiftPacketMonitor.Meetup.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MeetupInner() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MeetupInner(MeetupInner other) : this() {
          id_ = other.id_;
          name_ = other.name_;
          description_ = other.description_;
          f7_ = other.f7_;
          f8_ = other.f8_;
          f9_ = other.f9_;
          f10_ = other.f10_;
          f11_ = other.f11_;
          f12_ = other.f12_;
          f13_ = other.f13_;
          f14_ = other.f14_;
          f15_ = other.f15_;
          f16_ = other.f16_;
          f17_ = other.f17_;
          f18_ = other.f18_;
          f22_ = other.f22_;
          distance_ = other.distance_;
          f25_ = other.f25_;
          f29_ = other.f29_;
          f30_ = other.f30_;
          f31_ = other.f31_;
          f32_ = other.f32_;
          f33_ = other.f33_;
          duration_ = other.duration_;
          f42_ = other.f42_;
          f44_ = other.f44_;
          f46_ = other.f46_;
          f47_ = other.f47_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MeetupInner Clone() {
          return new MeetupInner(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private int id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 3;
        private string description_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description {
          get { return description_; }
          set {
            description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "f7" field.</summary>
        public const int F7FieldNumber = 7;
        private string f7_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string F7 {
          get { return f7_; }
          set {
            f7_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "f8" field.</summary>
        public const int F8FieldNumber = 8;
        private long f8_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long F8 {
          get { return f8_; }
          set {
            f8_ = value;
          }
        }

        /// <summary>Field number for the "f9" field.</summary>
        public const int F9FieldNumber = 9;
        private long f9_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long F9 {
          get { return f9_; }
          set {
            f9_ = value;
          }
        }

        /// <summary>Field number for the "f10" field.</summary>
        public const int F10FieldNumber = 10;
        private long f10_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long F10 {
          get { return f10_; }
          set {
            f10_ = value;
          }
        }

        /// <summary>Field number for the "f11" field.</summary>
        public const int F11FieldNumber = 11;
        private long f11_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long F11 {
          get { return f11_; }
          set {
            f11_ = value;
          }
        }

        /// <summary>Field number for the "f12" field.</summary>
        public const int F12FieldNumber = 12;
        private long f12_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long F12 {
          get { return f12_; }
          set {
            f12_ = value;
          }
        }

        /// <summary>Field number for the "f13" field.</summary>
        public const int F13FieldNumber = 13;
        private long f13_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long F13 {
          get { return f13_; }
          set {
            f13_ = value;
          }
        }

        /// <summary>Field number for the "f14" field.</summary>
        public const int F14FieldNumber = 14;
        private long f14_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long F14 {
          get { return f14_; }
          set {
            f14_ = value;
          }
        }

        /// <summary>Field number for the "f15" field.</summary>
        public const int F15FieldNumber = 15;
        private long f15_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long F15 {
          get { return f15_; }
          set {
            f15_ = value;
          }
        }

        /// <summary>Field number for the "f16" field.</summary>
        public const int F16FieldNumber = 16;
        private long f16_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long F16 {
          get { return f16_; }
          set {
            f16_ = value;
          }
        }

        /// <summary>Field number for the "f17" field.</summary>
        public const int F17FieldNumber = 17;
        private long f17_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long F17 {
          get { return f17_; }
          set {
            f17_ = value;
          }
        }

        /// <summary>Field number for the "f18" field.</summary>
        public const int F18FieldNumber = 18;
        private long f18_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long F18 {
          get { return f18_; }
          set {
            f18_ = value;
          }
        }

        /// <summary>Field number for the "f22" field.</summary>
        public const int F22FieldNumber = 22;
        private long f22_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long F22 {
          get { return f22_; }
          set {
            f22_ = value;
          }
        }

        /// <summary>Field number for the "distance" field.</summary>
        public const int DistanceFieldNumber = 24;
        private uint distance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Distance {
          get { return distance_; }
          set {
            distance_ = value;
          }
        }

        /// <summary>Field number for the "f25" field.</summary>
        public const int F25FieldNumber = 25;
        private long f25_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long F25 {
          get { return f25_; }
          set {
            f25_ = value;
          }
        }

        /// <summary>Field number for the "f29" field.</summary>
        public const int F29FieldNumber = 29;
        private int f29_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int F29 {
          get { return f29_; }
          set {
            f29_ = value;
          }
        }

        /// <summary>Field number for the "f30" field.</summary>
        public const int F30FieldNumber = 30;
        private int f30_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int F30 {
          get { return f30_; }
          set {
            f30_ = value;
          }
        }

        /// <summary>Field number for the "f31" field.</summary>
        public const int F31FieldNumber = 31;
        private int f31_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int F31 {
          get { return f31_; }
          set {
            f31_ = value;
          }
        }

        /// <summary>Field number for the "f32" field.</summary>
        public const int F32FieldNumber = 32;
        private uint f32_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint F32 {
          get { return f32_; }
          set {
            f32_ = value;
          }
        }

        /// <summary>Field number for the "f33" field.</summary>
        public const int F33FieldNumber = 33;
        private uint f33_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint F33 {
          get { return f33_; }
          set {
            f33_ = value;
          }
        }

        /// <summary>Field number for the "duration" field.</summary>
        public const int DurationFieldNumber = 34;
        private int duration_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Duration {
          get { return duration_; }
          set {
            duration_ = value;
          }
        }

        /// <summary>Field number for the "f42" field.</summary>
        public const int F42FieldNumber = 42;
        private long f42_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long F42 {
          get { return f42_; }
          set {
            f42_ = value;
          }
        }

        /// <summary>Field number for the "f44" field.</summary>
        public const int F44FieldNumber = 44;
        private long f44_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long F44 {
          get { return f44_; }
          set {
            f44_ = value;
          }
        }

        /// <summary>Field number for the "f46" field.</summary>
        public const int F46FieldNumber = 46;
        private int f46_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int F46 {
          get { return f46_; }
          set {
            f46_ = value;
          }
        }

        /// <summary>Field number for the "f47" field.</summary>
        public const int F47FieldNumber = 47;
        private int f47_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int F47 {
          get { return f47_; }
          set {
            f47_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MeetupInner);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MeetupInner other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Name != other.Name) return false;
          if (Description != other.Description) return false;
          if (F7 != other.F7) return false;
          if (F8 != other.F8) return false;
          if (F9 != other.F9) return false;
          if (F10 != other.F10) return false;
          if (F11 != other.F11) return false;
          if (F12 != other.F12) return false;
          if (F13 != other.F13) return false;
          if (F14 != other.F14) return false;
          if (F15 != other.F15) return false;
          if (F16 != other.F16) return false;
          if (F17 != other.F17) return false;
          if (F18 != other.F18) return false;
          if (F22 != other.F22) return false;
          if (Distance != other.Distance) return false;
          if (F25 != other.F25) return false;
          if (F29 != other.F29) return false;
          if (F30 != other.F30) return false;
          if (F31 != other.F31) return false;
          if (F32 != other.F32) return false;
          if (F33 != other.F33) return false;
          if (Duration != other.Duration) return false;
          if (F42 != other.F42) return false;
          if (F44 != other.F44) return false;
          if (F46 != other.F46) return false;
          if (F47 != other.F47) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0) hash ^= Id.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Description.Length != 0) hash ^= Description.GetHashCode();
          if (F7.Length != 0) hash ^= F7.GetHashCode();
          if (F8 != 0L) hash ^= F8.GetHashCode();
          if (F9 != 0L) hash ^= F9.GetHashCode();
          if (F10 != 0L) hash ^= F10.GetHashCode();
          if (F11 != 0L) hash ^= F11.GetHashCode();
          if (F12 != 0L) hash ^= F12.GetHashCode();
          if (F13 != 0L) hash ^= F13.GetHashCode();
          if (F14 != 0L) hash ^= F14.GetHashCode();
          if (F15 != 0L) hash ^= F15.GetHashCode();
          if (F16 != 0L) hash ^= F16.GetHashCode();
          if (F17 != 0L) hash ^= F17.GetHashCode();
          if (F18 != 0L) hash ^= F18.GetHashCode();
          if (F22 != 0L) hash ^= F22.GetHashCode();
          if (Distance != 0) hash ^= Distance.GetHashCode();
          if (F25 != 0L) hash ^= F25.GetHashCode();
          if (F29 != 0) hash ^= F29.GetHashCode();
          if (F30 != 0) hash ^= F30.GetHashCode();
          if (F31 != 0) hash ^= F31.GetHashCode();
          if (F32 != 0) hash ^= F32.GetHashCode();
          if (F33 != 0) hash ^= F33.GetHashCode();
          if (Duration != 0) hash ^= Duration.GetHashCode();
          if (F42 != 0L) hash ^= F42.GetHashCode();
          if (F44 != 0L) hash ^= F44.GetHashCode();
          if (F46 != 0) hash ^= F46.GetHashCode();
          if (F47 != 0) hash ^= F47.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Id);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (Description.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Description);
          }
          if (F7.Length != 0) {
            output.WriteRawTag(58);
            output.WriteString(F7);
          }
          if (F8 != 0L) {
            output.WriteRawTag(64);
            output.WriteInt64(F8);
          }
          if (F9 != 0L) {
            output.WriteRawTag(72);
            output.WriteInt64(F9);
          }
          if (F10 != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(F10);
          }
          if (F11 != 0L) {
            output.WriteRawTag(88);
            output.WriteInt64(F11);
          }
          if (F12 != 0L) {
            output.WriteRawTag(96);
            output.WriteInt64(F12);
          }
          if (F13 != 0L) {
            output.WriteRawTag(104);
            output.WriteInt64(F13);
          }
          if (F14 != 0L) {
            output.WriteRawTag(112);
            output.WriteInt64(F14);
          }
          if (F15 != 0L) {
            output.WriteRawTag(120);
            output.WriteInt64(F15);
          }
          if (F16 != 0L) {
            output.WriteRawTag(128, 1);
            output.WriteInt64(F16);
          }
          if (F17 != 0L) {
            output.WriteRawTag(136, 1);
            output.WriteInt64(F17);
          }
          if (F18 != 0L) {
            output.WriteRawTag(144, 1);
            output.WriteInt64(F18);
          }
          if (F22 != 0L) {
            output.WriteRawTag(176, 1);
            output.WriteInt64(F22);
          }
          if (Distance != 0) {
            output.WriteRawTag(197, 1);
            output.WriteFixed32(Distance);
          }
          if (F25 != 0L) {
            output.WriteRawTag(200, 1);
            output.WriteInt64(F25);
          }
          if (F29 != 0) {
            output.WriteRawTag(232, 1);
            output.WriteInt32(F29);
          }
          if (F30 != 0) {
            output.WriteRawTag(240, 1);
            output.WriteInt32(F30);
          }
          if (F31 != 0) {
            output.WriteRawTag(248, 1);
            output.WriteInt32(F31);
          }
          if (F32 != 0) {
            output.WriteRawTag(133, 2);
            output.WriteFixed32(F32);
          }
          if (F33 != 0) {
            output.WriteRawTag(141, 2);
            output.WriteFixed32(F33);
          }
          if (Duration != 0) {
            output.WriteRawTag(144, 2);
            output.WriteInt32(Duration);
          }
          if (F42 != 0L) {
            output.WriteRawTag(208, 2);
            output.WriteInt64(F42);
          }
          if (F44 != 0L) {
            output.WriteRawTag(224, 2);
            output.WriteInt64(F44);
          }
          if (F46 != 0) {
            output.WriteRawTag(240, 2);
            output.WriteInt32(F46);
          }
          if (F47 != 0) {
            output.WriteRawTag(248, 2);
            output.WriteInt32(F47);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Id);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (Description.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Description);
          }
          if (F7.Length != 0) {
            output.WriteRawTag(58);
            output.WriteString(F7);
          }
          if (F8 != 0L) {
            output.WriteRawTag(64);
            output.WriteInt64(F8);
          }
          if (F9 != 0L) {
            output.WriteRawTag(72);
            output.WriteInt64(F9);
          }
          if (F10 != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(F10);
          }
          if (F11 != 0L) {
            output.WriteRawTag(88);
            output.WriteInt64(F11);
          }
          if (F12 != 0L) {
            output.WriteRawTag(96);
            output.WriteInt64(F12);
          }
          if (F13 != 0L) {
            output.WriteRawTag(104);
            output.WriteInt64(F13);
          }
          if (F14 != 0L) {
            output.WriteRawTag(112);
            output.WriteInt64(F14);
          }
          if (F15 != 0L) {
            output.WriteRawTag(120);
            output.WriteInt64(F15);
          }
          if (F16 != 0L) {
            output.WriteRawTag(128, 1);
            output.WriteInt64(F16);
          }
          if (F17 != 0L) {
            output.WriteRawTag(136, 1);
            output.WriteInt64(F17);
          }
          if (F18 != 0L) {
            output.WriteRawTag(144, 1);
            output.WriteInt64(F18);
          }
          if (F22 != 0L) {
            output.WriteRawTag(176, 1);
            output.WriteInt64(F22);
          }
          if (Distance != 0) {
            output.WriteRawTag(197, 1);
            output.WriteFixed32(Distance);
          }
          if (F25 != 0L) {
            output.WriteRawTag(200, 1);
            output.WriteInt64(F25);
          }
          if (F29 != 0) {
            output.WriteRawTag(232, 1);
            output.WriteInt32(F29);
          }
          if (F30 != 0) {
            output.WriteRawTag(240, 1);
            output.WriteInt32(F30);
          }
          if (F31 != 0) {
            output.WriteRawTag(248, 1);
            output.WriteInt32(F31);
          }
          if (F32 != 0) {
            output.WriteRawTag(133, 2);
            output.WriteFixed32(F32);
          }
          if (F33 != 0) {
            output.WriteRawTag(141, 2);
            output.WriteFixed32(F33);
          }
          if (Duration != 0) {
            output.WriteRawTag(144, 2);
            output.WriteInt32(Duration);
          }
          if (F42 != 0L) {
            output.WriteRawTag(208, 2);
            output.WriteInt64(F42);
          }
          if (F44 != 0L) {
            output.WriteRawTag(224, 2);
            output.WriteInt64(F44);
          }
          if (F46 != 0) {
            output.WriteRawTag(240, 2);
            output.WriteInt32(F46);
          }
          if (F47 != 0) {
            output.WriteRawTag(248, 2);
            output.WriteInt32(F47);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Description.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
          }
          if (F7.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(F7);
          }
          if (F8 != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(F8);
          }
          if (F9 != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(F9);
          }
          if (F10 != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(F10);
          }
          if (F11 != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(F11);
          }
          if (F12 != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(F12);
          }
          if (F13 != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(F13);
          }
          if (F14 != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(F14);
          }
          if (F15 != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(F15);
          }
          if (F16 != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(F16);
          }
          if (F17 != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(F17);
          }
          if (F18 != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(F18);
          }
          if (F22 != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(F22);
          }
          if (Distance != 0) {
            size += 2 + 4;
          }
          if (F25 != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(F25);
          }
          if (F29 != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(F29);
          }
          if (F30 != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(F30);
          }
          if (F31 != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(F31);
          }
          if (F32 != 0) {
            size += 2 + 4;
          }
          if (F33 != 0) {
            size += 2 + 4;
          }
          if (Duration != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(Duration);
          }
          if (F42 != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(F42);
          }
          if (F44 != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(F44);
          }
          if (F46 != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(F46);
          }
          if (F47 != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(F47);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MeetupInner other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Description.Length != 0) {
            Description = other.Description;
          }
          if (other.F7.Length != 0) {
            F7 = other.F7;
          }
          if (other.F8 != 0L) {
            F8 = other.F8;
          }
          if (other.F9 != 0L) {
            F9 = other.F9;
          }
          if (other.F10 != 0L) {
            F10 = other.F10;
          }
          if (other.F11 != 0L) {
            F11 = other.F11;
          }
          if (other.F12 != 0L) {
            F12 = other.F12;
          }
          if (other.F13 != 0L) {
            F13 = other.F13;
          }
          if (other.F14 != 0L) {
            F14 = other.F14;
          }
          if (other.F15 != 0L) {
            F15 = other.F15;
          }
          if (other.F16 != 0L) {
            F16 = other.F16;
          }
          if (other.F17 != 0L) {
            F17 = other.F17;
          }
          if (other.F18 != 0L) {
            F18 = other.F18;
          }
          if (other.F22 != 0L) {
            F22 = other.F22;
          }
          if (other.Distance != 0) {
            Distance = other.Distance;
          }
          if (other.F25 != 0L) {
            F25 = other.F25;
          }
          if (other.F29 != 0) {
            F29 = other.F29;
          }
          if (other.F30 != 0) {
            F30 = other.F30;
          }
          if (other.F31 != 0) {
            F31 = other.F31;
          }
          if (other.F32 != 0) {
            F32 = other.F32;
          }
          if (other.F33 != 0) {
            F33 = other.F33;
          }
          if (other.Duration != 0) {
            Duration = other.Duration;
          }
          if (other.F42 != 0L) {
            F42 = other.F42;
          }
          if (other.F44 != 0L) {
            F44 = other.F44;
          }
          if (other.F46 != 0) {
            F46 = other.F46;
          }
          if (other.F47 != 0) {
            F47 = other.F47;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadInt32();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
              case 26: {
                Description = input.ReadString();
                break;
              }
              case 58: {
                F7 = input.ReadString();
                break;
              }
              case 64: {
                F8 = input.ReadInt64();
                break;
              }
              case 72: {
                F9 = input.ReadInt64();
                break;
              }
              case 80: {
                F10 = input.ReadInt64();
                break;
              }
              case 88: {
                F11 = input.ReadInt64();
                break;
              }
              case 96: {
                F12 = input.ReadInt64();
                break;
              }
              case 104: {
                F13 = input.ReadInt64();
                break;
              }
              case 112: {
                F14 = input.ReadInt64();
                break;
              }
              case 120: {
                F15 = input.ReadInt64();
                break;
              }
              case 128: {
                F16 = input.ReadInt64();
                break;
              }
              case 136: {
                F17 = input.ReadInt64();
                break;
              }
              case 144: {
                F18 = input.ReadInt64();
                break;
              }
              case 176: {
                F22 = input.ReadInt64();
                break;
              }
              case 197: {
                Distance = input.ReadFixed32();
                break;
              }
              case 200: {
                F25 = input.ReadInt64();
                break;
              }
              case 232: {
                F29 = input.ReadInt32();
                break;
              }
              case 240: {
                F30 = input.ReadInt32();
                break;
              }
              case 248: {
                F31 = input.ReadInt32();
                break;
              }
              case 261: {
                F32 = input.ReadFixed32();
                break;
              }
              case 269: {
                F33 = input.ReadFixed32();
                break;
              }
              case 272: {
                Duration = input.ReadInt32();
                break;
              }
              case 336: {
                F42 = input.ReadInt64();
                break;
              }
              case 352: {
                F44 = input.ReadInt64();
                break;
              }
              case 368: {
                F46 = input.ReadInt32();
                break;
              }
              case 376: {
                F47 = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Id = input.ReadInt32();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
              case 26: {
                Description = input.ReadString();
                break;
              }
              case 58: {
                F7 = input.ReadString();
                break;
              }
              case 64: {
                F8 = input.ReadInt64();
                break;
              }
              case 72: {
                F9 = input.ReadInt64();
                break;
              }
              case 80: {
                F10 = input.ReadInt64();
                break;
              }
              case 88: {
                F11 = input.ReadInt64();
                break;
              }
              case 96: {
                F12 = input.ReadInt64();
                break;
              }
              case 104: {
                F13 = input.ReadInt64();
                break;
              }
              case 112: {
                F14 = input.ReadInt64();
                break;
              }
              case 120: {
                F15 = input.ReadInt64();
                break;
              }
              case 128: {
                F16 = input.ReadInt64();
                break;
              }
              case 136: {
                F17 = input.ReadInt64();
                break;
              }
              case 144: {
                F18 = input.ReadInt64();
                break;
              }
              case 176: {
                F22 = input.ReadInt64();
                break;
              }
              case 197: {
                Distance = input.ReadFixed32();
                break;
              }
              case 200: {
                F25 = input.ReadInt64();
                break;
              }
              case 232: {
                F29 = input.ReadInt32();
                break;
              }
              case 240: {
                F30 = input.ReadInt32();
                break;
              }
              case 248: {
                F31 = input.ReadInt32();
                break;
              }
              case 261: {
                F32 = input.ReadFixed32();
                break;
              }
              case 269: {
                F33 = input.ReadFixed32();
                break;
              }
              case 272: {
                Duration = input.ReadInt32();
                break;
              }
              case 336: {
                F42 = input.ReadInt64();
                break;
              }
              case 352: {
                F44 = input.ReadInt64();
                break;
              }
              case 368: {
                F46 = input.ReadInt32();
                break;
              }
              case 376: {
                F47 = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class PlayerState : pb::IMessage<PlayerState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerState> _parser = new pb::MessageParser<PlayerState>(() => new PlayerState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerState(PlayerState other) : this() {
      id_ = other.id_;
      worldTime_ = other.worldTime_;
      distance_ = other.distance_;
      roadTime_ = other.roadTime_;
      laps_ = other.laps_;
      speed_ = other.speed_;
      roadPosition_ = other.roadPosition_;
      cadenceUHz_ = other.cadenceUHz_;
      heartrate_ = other.heartrate_;
      power_ = other.power_;
      heading_ = other.heading_;
      lean_ = other.lean_;
      climbing_ = other.climbing_;
      time_ = other.time_;
      f19_ = other.f19_;
      f20_ = other.f20_;
      progress_ = other.progress_;
      customisationId_ = other.customisationId_;
      justWatching_ = other.justWatching_;
      calories_ = other.calories_;
      x_ = other.x_;
      altitude_ = other.altitude_;
      y_ = other.y_;
      watchingRiderId_ = other.watchingRiderId_;
      groupId_ = other.groupId_;
      sport_ = other.sport_;
      f34_ = other.f34_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerState Clone() {
      return new PlayerState(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "worldTime" field.</summary>
    public const int WorldTimeFieldNumber = 2;
    private long worldTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WorldTime {
      get { return worldTime_; }
      set {
        worldTime_ = value;
      }
    }

    /// <summary>Field number for the "distance" field.</summary>
    public const int DistanceFieldNumber = 3;
    private int distance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Distance {
      get { return distance_; }
      set {
        distance_ = value;
      }
    }

    /// <summary>Field number for the "roadTime" field.</summary>
    public const int RoadTimeFieldNumber = 4;
    private int roadTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoadTime {
      get { return roadTime_; }
      set {
        roadTime_ = value;
      }
    }

    /// <summary>Field number for the "laps" field.</summary>
    public const int LapsFieldNumber = 5;
    private int laps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Laps {
      get { return laps_; }
      set {
        laps_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 6;
    private int speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "roadPosition" field.</summary>
    public const int RoadPositionFieldNumber = 8;
    private int roadPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoadPosition {
      get { return roadPosition_; }
      set {
        roadPosition_ = value;
      }
    }

    /// <summary>Field number for the "cadenceUHz" field.</summary>
    public const int CadenceUHzFieldNumber = 9;
    private int cadenceUHz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CadenceUHz {
      get { return cadenceUHz_; }
      set {
        cadenceUHz_ = value;
      }
    }

    /// <summary>Field number for the "heartrate" field.</summary>
    public const int HeartrateFieldNumber = 11;
    private int heartrate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Heartrate {
      get { return heartrate_; }
      set {
        heartrate_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 12;
    private int power_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "heading" field.</summary>
    public const int HeadingFieldNumber = 13;
    private long heading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Heading {
      get { return heading_; }
      set {
        heading_ = value;
      }
    }

    /// <summary>Field number for the "lean" field.</summary>
    public const int LeanFieldNumber = 14;
    private int lean_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lean {
      get { return lean_; }
      set {
        lean_ = value;
      }
    }

    /// <summary>Field number for the "climbing" field.</summary>
    public const int ClimbingFieldNumber = 15;
    private int climbing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Climbing {
      get { return climbing_; }
      set {
        climbing_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 16;
    private int time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "f19" field.</summary>
    public const int F19FieldNumber = 19;
    private int f19_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F19 {
      get { return f19_; }
      set {
        f19_ = value;
      }
    }

    /// <summary>Field number for the "f20" field.</summary>
    public const int F20FieldNumber = 20;
    private int f20_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F20 {
      get { return f20_; }
      set {
        f20_ = value;
      }
    }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 21;
    private int progress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    /// <summary>Field number for the "customisationId" field.</summary>
    public const int CustomisationIdFieldNumber = 22;
    private long customisationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CustomisationId {
      get { return customisationId_; }
      set {
        customisationId_ = value;
      }
    }

    /// <summary>Field number for the "justWatching" field.</summary>
    public const int JustWatchingFieldNumber = 23;
    private int justWatching_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JustWatching {
      get { return justWatching_; }
      set {
        justWatching_ = value;
      }
    }

    /// <summary>Field number for the "calories" field.</summary>
    public const int CaloriesFieldNumber = 24;
    private int calories_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Calories {
      get { return calories_; }
      set {
        calories_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 25;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "altitude" field.</summary>
    public const int AltitudeFieldNumber = 26;
    private float altitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Altitude {
      get { return altitude_; }
      set {
        altitude_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 27;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "watchingRiderId" field.</summary>
    public const int WatchingRiderIdFieldNumber = 28;
    private int watchingRiderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WatchingRiderId {
      get { return watchingRiderId_; }
      set {
        watchingRiderId_ = value;
      }
    }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 29;
    private int groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "sport" field.</summary>
    public const int SportFieldNumber = 31;
    private long sport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Sport {
      get { return sport_; }
      set {
        sport_ = value;
      }
    }

    /// <summary>Field number for the "f34" field.</summary>
    public const int F34FieldNumber = 34;
    private float f34_;
    /// <summary>
    /// actual distance moved included lateral movement
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float F34 {
      get { return f34_; }
      set {
        f34_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (WorldTime != other.WorldTime) return false;
      if (Distance != other.Distance) return false;
      if (RoadTime != other.RoadTime) return false;
      if (Laps != other.Laps) return false;
      if (Speed != other.Speed) return false;
      if (RoadPosition != other.RoadPosition) return false;
      if (CadenceUHz != other.CadenceUHz) return false;
      if (Heartrate != other.Heartrate) return false;
      if (Power != other.Power) return false;
      if (Heading != other.Heading) return false;
      if (Lean != other.Lean) return false;
      if (Climbing != other.Climbing) return false;
      if (Time != other.Time) return false;
      if (F19 != other.F19) return false;
      if (F20 != other.F20) return false;
      if (Progress != other.Progress) return false;
      if (CustomisationId != other.CustomisationId) return false;
      if (JustWatching != other.JustWatching) return false;
      if (Calories != other.Calories) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Altitude, other.Altitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (WatchingRiderId != other.WatchingRiderId) return false;
      if (GroupId != other.GroupId) return false;
      if (Sport != other.Sport) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(F34, other.F34)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (WorldTime != 0L) hash ^= WorldTime.GetHashCode();
      if (Distance != 0) hash ^= Distance.GetHashCode();
      if (RoadTime != 0) hash ^= RoadTime.GetHashCode();
      if (Laps != 0) hash ^= Laps.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (RoadPosition != 0) hash ^= RoadPosition.GetHashCode();
      if (CadenceUHz != 0) hash ^= CadenceUHz.GetHashCode();
      if (Heartrate != 0) hash ^= Heartrate.GetHashCode();
      if (Power != 0) hash ^= Power.GetHashCode();
      if (Heading != 0L) hash ^= Heading.GetHashCode();
      if (Lean != 0) hash ^= Lean.GetHashCode();
      if (Climbing != 0) hash ^= Climbing.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (F19 != 0) hash ^= F19.GetHashCode();
      if (F20 != 0) hash ^= F20.GetHashCode();
      if (Progress != 0) hash ^= Progress.GetHashCode();
      if (CustomisationId != 0L) hash ^= CustomisationId.GetHashCode();
      if (JustWatching != 0) hash ^= JustWatching.GetHashCode();
      if (Calories != 0) hash ^= Calories.GetHashCode();
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Altitude != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Altitude);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (WatchingRiderId != 0) hash ^= WatchingRiderId.GetHashCode();
      if (GroupId != 0) hash ^= GroupId.GetHashCode();
      if (Sport != 0L) hash ^= Sport.GetHashCode();
      if (F34 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(F34);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (WorldTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(WorldTime);
      }
      if (Distance != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Distance);
      }
      if (RoadTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RoadTime);
      }
      if (Laps != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Laps);
      }
      if (Speed != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Speed);
      }
      if (RoadPosition != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RoadPosition);
      }
      if (CadenceUHz != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CadenceUHz);
      }
      if (Heartrate != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Heartrate);
      }
      if (Power != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Power);
      }
      if (Heading != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(Heading);
      }
      if (Lean != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Lean);
      }
      if (Climbing != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Climbing);
      }
      if (Time != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Time);
      }
      if (F19 != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(F19);
      }
      if (F20 != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(F20);
      }
      if (Progress != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(Progress);
      }
      if (CustomisationId != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(CustomisationId);
      }
      if (JustWatching != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(JustWatching);
      }
      if (Calories != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(Calories);
      }
      if (X != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(X);
      }
      if (Altitude != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(Altitude);
      }
      if (Y != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(Y);
      }
      if (WatchingRiderId != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(WatchingRiderId);
      }
      if (GroupId != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(GroupId);
      }
      if (Sport != 0L) {
        output.WriteRawTag(248, 1);
        output.WriteInt64(Sport);
      }
      if (F34 != 0F) {
        output.WriteRawTag(149, 2);
        output.WriteFloat(F34);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (WorldTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(WorldTime);
      }
      if (Distance != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Distance);
      }
      if (RoadTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RoadTime);
      }
      if (Laps != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Laps);
      }
      if (Speed != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Speed);
      }
      if (RoadPosition != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RoadPosition);
      }
      if (CadenceUHz != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CadenceUHz);
      }
      if (Heartrate != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Heartrate);
      }
      if (Power != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Power);
      }
      if (Heading != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(Heading);
      }
      if (Lean != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Lean);
      }
      if (Climbing != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Climbing);
      }
      if (Time != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Time);
      }
      if (F19 != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(F19);
      }
      if (F20 != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(F20);
      }
      if (Progress != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(Progress);
      }
      if (CustomisationId != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(CustomisationId);
      }
      if (JustWatching != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(JustWatching);
      }
      if (Calories != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(Calories);
      }
      if (X != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(X);
      }
      if (Altitude != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(Altitude);
      }
      if (Y != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(Y);
      }
      if (WatchingRiderId != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(WatchingRiderId);
      }
      if (GroupId != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(GroupId);
      }
      if (Sport != 0L) {
        output.WriteRawTag(248, 1);
        output.WriteInt64(Sport);
      }
      if (F34 != 0F) {
        output.WriteRawTag(149, 2);
        output.WriteFloat(F34);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (WorldTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WorldTime);
      }
      if (Distance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Distance);
      }
      if (RoadTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoadTime);
      }
      if (Laps != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Laps);
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (RoadPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoadPosition);
      }
      if (CadenceUHz != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CadenceUHz);
      }
      if (Heartrate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Heartrate);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      if (Heading != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Heading);
      }
      if (Lean != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lean);
      }
      if (Climbing != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Climbing);
      }
      if (Time != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (F19 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(F19);
      }
      if (F20 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(F20);
      }
      if (Progress != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Progress);
      }
      if (CustomisationId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(CustomisationId);
      }
      if (JustWatching != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(JustWatching);
      }
      if (Calories != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Calories);
      }
      if (X != 0F) {
        size += 2 + 4;
      }
      if (Altitude != 0F) {
        size += 2 + 4;
      }
      if (Y != 0F) {
        size += 2 + 4;
      }
      if (WatchingRiderId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WatchingRiderId);
      }
      if (GroupId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GroupId);
      }
      if (Sport != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Sport);
      }
      if (F34 != 0F) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerState other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.WorldTime != 0L) {
        WorldTime = other.WorldTime;
      }
      if (other.Distance != 0) {
        Distance = other.Distance;
      }
      if (other.RoadTime != 0) {
        RoadTime = other.RoadTime;
      }
      if (other.Laps != 0) {
        Laps = other.Laps;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.RoadPosition != 0) {
        RoadPosition = other.RoadPosition;
      }
      if (other.CadenceUHz != 0) {
        CadenceUHz = other.CadenceUHz;
      }
      if (other.Heartrate != 0) {
        Heartrate = other.Heartrate;
      }
      if (other.Power != 0) {
        Power = other.Power;
      }
      if (other.Heading != 0L) {
        Heading = other.Heading;
      }
      if (other.Lean != 0) {
        Lean = other.Lean;
      }
      if (other.Climbing != 0) {
        Climbing = other.Climbing;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      if (other.F19 != 0) {
        F19 = other.F19;
      }
      if (other.F20 != 0) {
        F20 = other.F20;
      }
      if (other.Progress != 0) {
        Progress = other.Progress;
      }
      if (other.CustomisationId != 0L) {
        CustomisationId = other.CustomisationId;
      }
      if (other.JustWatching != 0) {
        JustWatching = other.JustWatching;
      }
      if (other.Calories != 0) {
        Calories = other.Calories;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Altitude != 0F) {
        Altitude = other.Altitude;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.WatchingRiderId != 0) {
        WatchingRiderId = other.WatchingRiderId;
      }
      if (other.GroupId != 0) {
        GroupId = other.GroupId;
      }
      if (other.Sport != 0L) {
        Sport = other.Sport;
      }
      if (other.F34 != 0F) {
        F34 = other.F34;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            WorldTime = input.ReadInt64();
            break;
          }
          case 24: {
            Distance = input.ReadInt32();
            break;
          }
          case 32: {
            RoadTime = input.ReadInt32();
            break;
          }
          case 40: {
            Laps = input.ReadInt32();
            break;
          }
          case 48: {
            Speed = input.ReadInt32();
            break;
          }
          case 64: {
            RoadPosition = input.ReadInt32();
            break;
          }
          case 72: {
            CadenceUHz = input.ReadInt32();
            break;
          }
          case 88: {
            Heartrate = input.ReadInt32();
            break;
          }
          case 96: {
            Power = input.ReadInt32();
            break;
          }
          case 104: {
            Heading = input.ReadInt64();
            break;
          }
          case 112: {
            Lean = input.ReadInt32();
            break;
          }
          case 120: {
            Climbing = input.ReadInt32();
            break;
          }
          case 128: {
            Time = input.ReadInt32();
            break;
          }
          case 152: {
            F19 = input.ReadInt32();
            break;
          }
          case 160: {
            F20 = input.ReadInt32();
            break;
          }
          case 168: {
            Progress = input.ReadInt32();
            break;
          }
          case 176: {
            CustomisationId = input.ReadInt64();
            break;
          }
          case 184: {
            JustWatching = input.ReadInt32();
            break;
          }
          case 192: {
            Calories = input.ReadInt32();
            break;
          }
          case 205: {
            X = input.ReadFloat();
            break;
          }
          case 213: {
            Altitude = input.ReadFloat();
            break;
          }
          case 221: {
            Y = input.ReadFloat();
            break;
          }
          case 224: {
            WatchingRiderId = input.ReadInt32();
            break;
          }
          case 232: {
            GroupId = input.ReadInt32();
            break;
          }
          case 248: {
            Sport = input.ReadInt64();
            break;
          }
          case 277: {
            F34 = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            WorldTime = input.ReadInt64();
            break;
          }
          case 24: {
            Distance = input.ReadInt32();
            break;
          }
          case 32: {
            RoadTime = input.ReadInt32();
            break;
          }
          case 40: {
            Laps = input.ReadInt32();
            break;
          }
          case 48: {
            Speed = input.ReadInt32();
            break;
          }
          case 64: {
            RoadPosition = input.ReadInt32();
            break;
          }
          case 72: {
            CadenceUHz = input.ReadInt32();
            break;
          }
          case 88: {
            Heartrate = input.ReadInt32();
            break;
          }
          case 96: {
            Power = input.ReadInt32();
            break;
          }
          case 104: {
            Heading = input.ReadInt64();
            break;
          }
          case 112: {
            Lean = input.ReadInt32();
            break;
          }
          case 120: {
            Climbing = input.ReadInt32();
            break;
          }
          case 128: {
            Time = input.ReadInt32();
            break;
          }
          case 152: {
            F19 = input.ReadInt32();
            break;
          }
          case 160: {
            F20 = input.ReadInt32();
            break;
          }
          case 168: {
            Progress = input.ReadInt32();
            break;
          }
          case 176: {
            CustomisationId = input.ReadInt64();
            break;
          }
          case 184: {
            JustWatching = input.ReadInt32();
            break;
          }
          case 192: {
            Calories = input.ReadInt32();
            break;
          }
          case 205: {
            X = input.ReadFloat();
            break;
          }
          case 213: {
            Altitude = input.ReadFloat();
            break;
          }
          case 221: {
            Y = input.ReadFloat();
            break;
          }
          case 224: {
            WatchingRiderId = input.ReadInt32();
            break;
          }
          case 232: {
            GroupId = input.ReadInt32();
            break;
          }
          case 248: {
            Sport = input.ReadInt64();
            break;
          }
          case 277: {
            F34 = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ClientToServer : pb::IMessage<ClientToServer>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClientToServer> _parser = new pb::MessageParser<ClientToServer>(() => new ClientToServer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientToServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientToServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientToServer(ClientToServer other) : this() {
      connected_ = other.connected_;
      riderId_ = other.riderId_;
      worldTime_ = other.worldTime_;
      state_ = other.state_ != null ? other.state_.Clone() : null;
      seqno_ = other.seqno_;
      tag8_ = other.tag8_;
      tag9_ = other.tag9_;
      lastUpdate_ = other.lastUpdate_;
      tag11_ = other.tag11_;
      lastPlayerUpdate_ = other.lastPlayerUpdate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientToServer Clone() {
      return new ClientToServer(this);
    }

    /// <summary>Field number for the "connected" field.</summary>
    public const int ConnectedFieldNumber = 1;
    private int connected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Connected {
      get { return connected_; }
      set {
        connected_ = value;
      }
    }

    /// <summary>Field number for the "rider_id" field.</summary>
    public const int RiderIdFieldNumber = 2;
    private int riderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RiderId {
      get { return riderId_; }
      set {
        riderId_ = value;
      }
    }

    /// <summary>Field number for the "world_time" field.</summary>
    public const int WorldTimeFieldNumber = 3;
    private long worldTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WorldTime {
      get { return worldTime_; }
      set {
        worldTime_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 7;
    private global::ZwiftPacketMonitor.PlayerState state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ZwiftPacketMonitor.PlayerState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "seqno" field.</summary>
    public const int SeqnoFieldNumber = 4;
    private int seqno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seqno {
      get { return seqno_; }
      set {
        seqno_ = value;
      }
    }

    /// <summary>Field number for the "tag8" field.</summary>
    public const int Tag8FieldNumber = 8;
    private long tag8_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Tag8 {
      get { return tag8_; }
      set {
        tag8_ = value;
      }
    }

    /// <summary>Field number for the "tag9" field.</summary>
    public const int Tag9FieldNumber = 9;
    private long tag9_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Tag9 {
      get { return tag9_; }
      set {
        tag9_ = value;
      }
    }

    /// <summary>Field number for the "last_update" field.</summary>
    public const int LastUpdateFieldNumber = 10;
    private long lastUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastUpdate {
      get { return lastUpdate_; }
      set {
        lastUpdate_ = value;
      }
    }

    /// <summary>Field number for the "tag11" field.</summary>
    public const int Tag11FieldNumber = 11;
    private long tag11_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Tag11 {
      get { return tag11_; }
      set {
        tag11_ = value;
      }
    }

    /// <summary>Field number for the "last_player_update" field.</summary>
    public const int LastPlayerUpdateFieldNumber = 12;
    private long lastPlayerUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastPlayerUpdate {
      get { return lastPlayerUpdate_; }
      set {
        lastPlayerUpdate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientToServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientToServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Connected != other.Connected) return false;
      if (RiderId != other.RiderId) return false;
      if (WorldTime != other.WorldTime) return false;
      if (!object.Equals(State, other.State)) return false;
      if (Seqno != other.Seqno) return false;
      if (Tag8 != other.Tag8) return false;
      if (Tag9 != other.Tag9) return false;
      if (LastUpdate != other.LastUpdate) return false;
      if (Tag11 != other.Tag11) return false;
      if (LastPlayerUpdate != other.LastPlayerUpdate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Connected != 0) hash ^= Connected.GetHashCode();
      if (RiderId != 0) hash ^= RiderId.GetHashCode();
      if (WorldTime != 0L) hash ^= WorldTime.GetHashCode();
      if (state_ != null) hash ^= State.GetHashCode();
      if (Seqno != 0) hash ^= Seqno.GetHashCode();
      if (Tag8 != 0L) hash ^= Tag8.GetHashCode();
      if (Tag9 != 0L) hash ^= Tag9.GetHashCode();
      if (LastUpdate != 0L) hash ^= LastUpdate.GetHashCode();
      if (Tag11 != 0L) hash ^= Tag11.GetHashCode();
      if (LastPlayerUpdate != 0L) hash ^= LastPlayerUpdate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Connected != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Connected);
      }
      if (RiderId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RiderId);
      }
      if (WorldTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(WorldTime);
      }
      if (Seqno != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Seqno);
      }
      if (state_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(State);
      }
      if (Tag8 != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Tag8);
      }
      if (Tag9 != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(Tag9);
      }
      if (LastUpdate != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(LastUpdate);
      }
      if (Tag11 != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(Tag11);
      }
      if (LastPlayerUpdate != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(LastPlayerUpdate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Connected != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Connected);
      }
      if (RiderId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RiderId);
      }
      if (WorldTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(WorldTime);
      }
      if (Seqno != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Seqno);
      }
      if (state_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(State);
      }
      if (Tag8 != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Tag8);
      }
      if (Tag9 != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(Tag9);
      }
      if (LastUpdate != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(LastUpdate);
      }
      if (Tag11 != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(Tag11);
      }
      if (LastPlayerUpdate != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(LastPlayerUpdate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Connected != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Connected);
      }
      if (RiderId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RiderId);
      }
      if (WorldTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WorldTime);
      }
      if (state_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(State);
      }
      if (Seqno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seqno);
      }
      if (Tag8 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tag8);
      }
      if (Tag9 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tag9);
      }
      if (LastUpdate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastUpdate);
      }
      if (Tag11 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tag11);
      }
      if (LastPlayerUpdate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastPlayerUpdate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientToServer other) {
      if (other == null) {
        return;
      }
      if (other.Connected != 0) {
        Connected = other.Connected;
      }
      if (other.RiderId != 0) {
        RiderId = other.RiderId;
      }
      if (other.WorldTime != 0L) {
        WorldTime = other.WorldTime;
      }
      if (other.state_ != null) {
        if (state_ == null) {
          State = new global::ZwiftPacketMonitor.PlayerState();
        }
        State.MergeFrom(other.State);
      }
      if (other.Seqno != 0) {
        Seqno = other.Seqno;
      }
      if (other.Tag8 != 0L) {
        Tag8 = other.Tag8;
      }
      if (other.Tag9 != 0L) {
        Tag9 = other.Tag9;
      }
      if (other.LastUpdate != 0L) {
        LastUpdate = other.LastUpdate;
      }
      if (other.Tag11 != 0L) {
        Tag11 = other.Tag11;
      }
      if (other.LastPlayerUpdate != 0L) {
        LastPlayerUpdate = other.LastPlayerUpdate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Connected = input.ReadInt32();
            break;
          }
          case 16: {
            RiderId = input.ReadInt32();
            break;
          }
          case 24: {
            WorldTime = input.ReadInt64();
            break;
          }
          case 32: {
            Seqno = input.ReadInt32();
            break;
          }
          case 58: {
            if (state_ == null) {
              State = new global::ZwiftPacketMonitor.PlayerState();
            }
            input.ReadMessage(State);
            break;
          }
          case 64: {
            Tag8 = input.ReadInt64();
            break;
          }
          case 72: {
            Tag9 = input.ReadInt64();
            break;
          }
          case 80: {
            LastUpdate = input.ReadInt64();
            break;
          }
          case 88: {
            Tag11 = input.ReadInt64();
            break;
          }
          case 96: {
            LastPlayerUpdate = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Connected = input.ReadInt32();
            break;
          }
          case 16: {
            RiderId = input.ReadInt32();
            break;
          }
          case 24: {
            WorldTime = input.ReadInt64();
            break;
          }
          case 32: {
            Seqno = input.ReadInt32();
            break;
          }
          case 58: {
            if (state_ == null) {
              State = new global::ZwiftPacketMonitor.PlayerState();
            }
            input.ReadMessage(State);
            break;
          }
          case 64: {
            Tag8 = input.ReadInt64();
            break;
          }
          case 72: {
            Tag9 = input.ReadInt64();
            break;
          }
          case 80: {
            LastUpdate = input.ReadInt64();
            break;
          }
          case 88: {
            Tag11 = input.ReadInt64();
            break;
          }
          case 96: {
            LastPlayerUpdate = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// string firstName=7;
  /// string lastName=8;
  /// string timestamp=17;
  /// </summary>
  public sealed partial class UnknownMessage1 : pb::IMessage<UnknownMessage1>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UnknownMessage1> _parser = new pb::MessageParser<UnknownMessage1>(() => new UnknownMessage1());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnknownMessage1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnknownMessage1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnknownMessage1(UnknownMessage1 other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnknownMessage1 Clone() {
      return new UnknownMessage1(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnknownMessage1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnknownMessage1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnknownMessage1 other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  /// int64 tag1=1;
  /// UnknownMessage1 tag4=4;
  /// </summary>
  public sealed partial class UnknownMessage : pb::IMessage<UnknownMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UnknownMessage> _parser = new pb::MessageParser<UnknownMessage>(() => new UnknownMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnknownMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnknownMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnknownMessage(UnknownMessage other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnknownMessage Clone() {
      return new UnknownMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnknownMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnknownMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnknownMessage other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class PlayerUpdate : pb::IMessage<PlayerUpdate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerUpdate> _parser = new pb::MessageParser<PlayerUpdate>(() => new PlayerUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerUpdate(PlayerUpdate other) : this() {
      tag1_ = other.tag1_;
      tag2_ = other.tag2_;
      tag3_ = other.tag3_;
      payload_ = other.payload_;
      tag5_ = other.tag5_;
      tag6_ = other.tag6_;
      tag7_ = other.tag7_;
      tag8_ = other.tag8_;
      tag9_ = other.tag9_;
      tag11_ = other.tag11_;
      tag12_ = other.tag12_;
      tag14_ = other.tag14_;
      tag15_ = other.tag15_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerUpdate Clone() {
      return new PlayerUpdate(this);
    }

    /// <summary>Field number for the "tag1" field.</summary>
    public const int Tag1FieldNumber = 1;
    private long tag1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Tag1 {
      get { return tag1_; }
      set {
        tag1_ = value;
      }
    }

    /// <summary>Field number for the "tag2" field.</summary>
    public const int Tag2FieldNumber = 2;
    private int tag2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tag2 {
      get { return tag2_; }
      set {
        tag2_ = value;
      }
    }

    /// <summary>Field number for the "tag3" field.</summary>
    public const int Tag3FieldNumber = 3;
    private int tag3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tag3 {
      get { return tag3_; }
      set {
        tag3_ = value;
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 4;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tag5" field.</summary>
    public const int Tag5FieldNumber = 5;
    private long tag5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Tag5 {
      get { return tag5_; }
      set {
        tag5_ = value;
      }
    }

    /// <summary>Field number for the "tag6" field.</summary>
    public const int Tag6FieldNumber = 6;
    private long tag6_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Tag6 {
      get { return tag6_; }
      set {
        tag6_ = value;
      }
    }

    /// <summary>Field number for the "tag7" field.</summary>
    public const int Tag7FieldNumber = 7;
    private long tag7_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Tag7 {
      get { return tag7_; }
      set {
        tag7_ = value;
      }
    }

    /// <summary>Field number for the "tag8" field.</summary>
    public const int Tag8FieldNumber = 8;
    private long tag8_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Tag8 {
      get { return tag8_; }
      set {
        tag8_ = value;
      }
    }

    /// <summary>Field number for the "tag9" field.</summary>
    public const int Tag9FieldNumber = 9;
    private long tag9_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Tag9 {
      get { return tag9_; }
      set {
        tag9_ = value;
      }
    }

    /// <summary>Field number for the "tag11" field.</summary>
    public const int Tag11FieldNumber = 11;
    private long tag11_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Tag11 {
      get { return tag11_; }
      set {
        tag11_ = value;
      }
    }

    /// <summary>Field number for the "tag12" field.</summary>
    public const int Tag12FieldNumber = 12;
    private long tag12_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Tag12 {
      get { return tag12_; }
      set {
        tag12_ = value;
      }
    }

    /// <summary>Field number for the "tag14" field.</summary>
    public const int Tag14FieldNumber = 14;
    private long tag14_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Tag14 {
      get { return tag14_; }
      set {
        tag14_ = value;
      }
    }

    /// <summary>Field number for the "tag15" field.</summary>
    public const int Tag15FieldNumber = 15;
    private long tag15_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Tag15 {
      get { return tag15_; }
      set {
        tag15_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag1 != other.Tag1) return false;
      if (Tag2 != other.Tag2) return false;
      if (Tag3 != other.Tag3) return false;
      if (Payload != other.Payload) return false;
      if (Tag5 != other.Tag5) return false;
      if (Tag6 != other.Tag6) return false;
      if (Tag7 != other.Tag7) return false;
      if (Tag8 != other.Tag8) return false;
      if (Tag9 != other.Tag9) return false;
      if (Tag11 != other.Tag11) return false;
      if (Tag12 != other.Tag12) return false;
      if (Tag14 != other.Tag14) return false;
      if (Tag15 != other.Tag15) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tag1 != 0L) hash ^= Tag1.GetHashCode();
      if (Tag2 != 0) hash ^= Tag2.GetHashCode();
      if (Tag3 != 0) hash ^= Tag3.GetHashCode();
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (Tag5 != 0L) hash ^= Tag5.GetHashCode();
      if (Tag6 != 0L) hash ^= Tag6.GetHashCode();
      if (Tag7 != 0L) hash ^= Tag7.GetHashCode();
      if (Tag8 != 0L) hash ^= Tag8.GetHashCode();
      if (Tag9 != 0L) hash ^= Tag9.GetHashCode();
      if (Tag11 != 0L) hash ^= Tag11.GetHashCode();
      if (Tag12 != 0L) hash ^= Tag12.GetHashCode();
      if (Tag14 != 0L) hash ^= Tag14.GetHashCode();
      if (Tag15 != 0L) hash ^= Tag15.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Tag1 != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Tag1);
      }
      if (Tag2 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Tag2);
      }
      if (Tag3 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Tag3);
      }
      if (Payload.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Payload);
      }
      if (Tag5 != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Tag5);
      }
      if (Tag6 != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Tag6);
      }
      if (Tag7 != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Tag7);
      }
      if (Tag8 != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Tag8);
      }
      if (Tag9 != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(Tag9);
      }
      if (Tag11 != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(Tag11);
      }
      if (Tag12 != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(Tag12);
      }
      if (Tag14 != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(Tag14);
      }
      if (Tag15 != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(Tag15);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Tag1 != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Tag1);
      }
      if (Tag2 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Tag2);
      }
      if (Tag3 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Tag3);
      }
      if (Payload.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Payload);
      }
      if (Tag5 != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Tag5);
      }
      if (Tag6 != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Tag6);
      }
      if (Tag7 != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Tag7);
      }
      if (Tag8 != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Tag8);
      }
      if (Tag9 != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(Tag9);
      }
      if (Tag11 != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(Tag11);
      }
      if (Tag12 != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(Tag12);
      }
      if (Tag14 != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(Tag14);
      }
      if (Tag15 != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(Tag15);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tag1 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tag1);
      }
      if (Tag2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tag2);
      }
      if (Tag3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tag3);
      }
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (Tag5 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tag5);
      }
      if (Tag6 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tag6);
      }
      if (Tag7 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tag7);
      }
      if (Tag8 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tag8);
      }
      if (Tag9 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tag9);
      }
      if (Tag11 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tag11);
      }
      if (Tag12 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tag12);
      }
      if (Tag14 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tag14);
      }
      if (Tag15 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tag15);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerUpdate other) {
      if (other == null) {
        return;
      }
      if (other.Tag1 != 0L) {
        Tag1 = other.Tag1;
      }
      if (other.Tag2 != 0) {
        Tag2 = other.Tag2;
      }
      if (other.Tag3 != 0) {
        Tag3 = other.Tag3;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      if (other.Tag5 != 0L) {
        Tag5 = other.Tag5;
      }
      if (other.Tag6 != 0L) {
        Tag6 = other.Tag6;
      }
      if (other.Tag7 != 0L) {
        Tag7 = other.Tag7;
      }
      if (other.Tag8 != 0L) {
        Tag8 = other.Tag8;
      }
      if (other.Tag9 != 0L) {
        Tag9 = other.Tag9;
      }
      if (other.Tag11 != 0L) {
        Tag11 = other.Tag11;
      }
      if (other.Tag12 != 0L) {
        Tag12 = other.Tag12;
      }
      if (other.Tag14 != 0L) {
        Tag14 = other.Tag14;
      }
      if (other.Tag15 != 0L) {
        Tag15 = other.Tag15;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Tag1 = input.ReadInt64();
            break;
          }
          case 16: {
            Tag2 = input.ReadInt32();
            break;
          }
          case 24: {
            Tag3 = input.ReadInt32();
            break;
          }
          case 34: {
            Payload = input.ReadBytes();
            break;
          }
          case 40: {
            Tag5 = input.ReadInt64();
            break;
          }
          case 48: {
            Tag6 = input.ReadInt64();
            break;
          }
          case 56: {
            Tag7 = input.ReadInt64();
            break;
          }
          case 64: {
            Tag8 = input.ReadInt64();
            break;
          }
          case 72: {
            Tag9 = input.ReadInt64();
            break;
          }
          case 88: {
            Tag11 = input.ReadInt64();
            break;
          }
          case 96: {
            Tag12 = input.ReadInt64();
            break;
          }
          case 112: {
            Tag14 = input.ReadInt64();
            break;
          }
          case 120: {
            Tag15 = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Tag1 = input.ReadInt64();
            break;
          }
          case 16: {
            Tag2 = input.ReadInt32();
            break;
          }
          case 24: {
            Tag3 = input.ReadInt32();
            break;
          }
          case 34: {
            Payload = input.ReadBytes();
            break;
          }
          case 40: {
            Tag5 = input.ReadInt64();
            break;
          }
          case 48: {
            Tag6 = input.ReadInt64();
            break;
          }
          case 56: {
            Tag7 = input.ReadInt64();
            break;
          }
          case 64: {
            Tag8 = input.ReadInt64();
            break;
          }
          case 72: {
            Tag9 = input.ReadInt64();
            break;
          }
          case 88: {
            Tag11 = input.ReadInt64();
            break;
          }
          case 96: {
            Tag12 = input.ReadInt64();
            break;
          }
          case 112: {
            Tag14 = input.ReadInt64();
            break;
          }
          case 120: {
            Tag15 = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// player entered world ?
  /// </summary>
  public sealed partial class Payload105 : pb::IMessage<Payload105>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Payload105> _parser = new pb::MessageParser<Payload105>(() => new Payload105());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Payload105> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload105() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload105(Payload105 other) : this() {
      f1_ = other.f1_;
      riderId_ = other.riderId_;
      f3_ = other.f3_;
      f4_ = other.f4_;
      f5_ = other.f5_;
      f6_ = other.f6_;
      firstName_ = other.firstName_;
      lastName_ = other.lastName_;
      f9_ = other.f9_;
      f11_ = other.f11_;
      f12_ = other.f12_;
      f13_ = other.f13_;
      f14_ = other.f14_;
      f15_ = other.f15_;
      f16_ = other.f16_;
      f7Date_ = other.f7Date_;
      f19_ = other.f19_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload105 Clone() {
      return new Payload105(this);
    }

    /// <summary>Field number for the "f1" field.</summary>
    public const int F1FieldNumber = 1;
    private long f1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long F1 {
      get { return f1_; }
      set {
        f1_ = value;
      }
    }

    /// <summary>Field number for the "rider_id" field.</summary>
    public const int RiderIdFieldNumber = 2;
    private int riderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RiderId {
      get { return riderId_; }
      set {
        riderId_ = value;
      }
    }

    /// <summary>Field number for the "f3" field.</summary>
    public const int F3FieldNumber = 3;
    private int f3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F3 {
      get { return f3_; }
      set {
        f3_ = value;
      }
    }

    /// <summary>Field number for the "f4" field.</summary>
    public const int F4FieldNumber = 4;
    private long f4_;
    /// <summary>
    /// int32?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long F4 {
      get { return f4_; }
      set {
        f4_ = value;
      }
    }

    /// <summary>Field number for the "f5" field.</summary>
    public const int F5FieldNumber = 5;
    private long f5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long F5 {
      get { return f5_; }
      set {
        f5_ = value;
      }
    }

    /// <summary>Field number for the "f6" field.</summary>
    public const int F6FieldNumber = 6;
    private long f6_;
    /// <summary>
    /// int32?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long F6 {
      get { return f6_; }
      set {
        f6_ = value;
      }
    }

    /// <summary>Field number for the "firstName" field.</summary>
    public const int FirstNameFieldNumber = 7;
    private string firstName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirstName {
      get { return firstName_; }
      set {
        firstName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lastName" field.</summary>
    public const int LastNameFieldNumber = 8;
    private string lastName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastName {
      get { return lastName_; }
      set {
        lastName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "f9" field.</summary>
    public const int F9FieldNumber = 9;
    private long f9_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long F9 {
      get { return f9_; }
      set {
        f9_ = value;
      }
    }

    /// <summary>Field number for the "f11" field.</summary>
    public const int F11FieldNumber = 11;
    private long f11_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long F11 {
      get { return f11_; }
      set {
        f11_ = value;
      }
    }

    /// <summary>Field number for the "f12" field.</summary>
    public const int F12FieldNumber = 12;
    private int f12_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F12 {
      get { return f12_; }
      set {
        f12_ = value;
      }
    }

    /// <summary>Field number for the "f13" field.</summary>
    public const int F13FieldNumber = 13;
    private int f13_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F13 {
      get { return f13_; }
      set {
        f13_ = value;
      }
    }

    /// <summary>Field number for the "f14" field.</summary>
    public const int F14FieldNumber = 14;
    private int f14_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F14 {
      get { return f14_; }
      set {
        f14_ = value;
      }
    }

    /// <summary>Field number for the "f15" field.</summary>
    public const int F15FieldNumber = 15;
    private int f15_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F15 {
      get { return f15_; }
      set {
        f15_ = value;
      }
    }

    /// <summary>Field number for the "f16" field.</summary>
    public const int F16FieldNumber = 16;
    private int f16_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F16 {
      get { return f16_; }
      set {
        f16_ = value;
      }
    }

    /// <summary>Field number for the "f7date" field.</summary>
    public const int F7DateFieldNumber = 17;
    private string f7Date_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string F7Date {
      get { return f7Date_; }
      set {
        f7Date_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "f19" field.</summary>
    public const int F19FieldNumber = 19;
    private int f19_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F19 {
      get { return f19_; }
      set {
        f19_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Payload105);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Payload105 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (F1 != other.F1) return false;
      if (RiderId != other.RiderId) return false;
      if (F3 != other.F3) return false;
      if (F4 != other.F4) return false;
      if (F5 != other.F5) return false;
      if (F6 != other.F6) return false;
      if (FirstName != other.FirstName) return false;
      if (LastName != other.LastName) return false;
      if (F9 != other.F9) return false;
      if (F11 != other.F11) return false;
      if (F12 != other.F12) return false;
      if (F13 != other.F13) return false;
      if (F14 != other.F14) return false;
      if (F15 != other.F15) return false;
      if (F16 != other.F16) return false;
      if (F7Date != other.F7Date) return false;
      if (F19 != other.F19) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (F1 != 0L) hash ^= F1.GetHashCode();
      if (RiderId != 0) hash ^= RiderId.GetHashCode();
      if (F3 != 0) hash ^= F3.GetHashCode();
      if (F4 != 0L) hash ^= F4.GetHashCode();
      if (F5 != 0L) hash ^= F5.GetHashCode();
      if (F6 != 0L) hash ^= F6.GetHashCode();
      if (FirstName.Length != 0) hash ^= FirstName.GetHashCode();
      if (LastName.Length != 0) hash ^= LastName.GetHashCode();
      if (F9 != 0L) hash ^= F9.GetHashCode();
      if (F11 != 0L) hash ^= F11.GetHashCode();
      if (F12 != 0) hash ^= F12.GetHashCode();
      if (F13 != 0) hash ^= F13.GetHashCode();
      if (F14 != 0) hash ^= F14.GetHashCode();
      if (F15 != 0) hash ^= F15.GetHashCode();
      if (F16 != 0) hash ^= F16.GetHashCode();
      if (F7Date.Length != 0) hash ^= F7Date.GetHashCode();
      if (F19 != 0) hash ^= F19.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (F1 != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(F1);
      }
      if (RiderId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RiderId);
      }
      if (F3 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(F3);
      }
      if (F4 != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(F4);
      }
      if (F5 != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(F5);
      }
      if (F6 != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(F6);
      }
      if (FirstName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(FirstName);
      }
      if (LastName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(LastName);
      }
      if (F9 != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(F9);
      }
      if (F11 != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(F11);
      }
      if (F12 != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(F12);
      }
      if (F13 != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(F13);
      }
      if (F14 != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(F14);
      }
      if (F15 != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(F15);
      }
      if (F16 != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(F16);
      }
      if (F7Date.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(F7Date);
      }
      if (F19 != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(F19);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (F1 != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(F1);
      }
      if (RiderId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RiderId);
      }
      if (F3 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(F3);
      }
      if (F4 != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(F4);
      }
      if (F5 != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(F5);
      }
      if (F6 != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(F6);
      }
      if (FirstName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(FirstName);
      }
      if (LastName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(LastName);
      }
      if (F9 != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(F9);
      }
      if (F11 != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(F11);
      }
      if (F12 != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(F12);
      }
      if (F13 != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(F13);
      }
      if (F14 != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(F14);
      }
      if (F15 != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(F15);
      }
      if (F16 != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(F16);
      }
      if (F7Date.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(F7Date);
      }
      if (F19 != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(F19);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (F1 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(F1);
      }
      if (RiderId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RiderId);
      }
      if (F3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F3);
      }
      if (F4 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(F4);
      }
      if (F5 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(F5);
      }
      if (F6 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(F6);
      }
      if (FirstName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstName);
      }
      if (LastName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastName);
      }
      if (F9 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(F9);
      }
      if (F11 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(F11);
      }
      if (F12 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F12);
      }
      if (F13 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F13);
      }
      if (F14 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F14);
      }
      if (F15 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F15);
      }
      if (F16 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(F16);
      }
      if (F7Date.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(F7Date);
      }
      if (F19 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(F19);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Payload105 other) {
      if (other == null) {
        return;
      }
      if (other.F1 != 0L) {
        F1 = other.F1;
      }
      if (other.RiderId != 0) {
        RiderId = other.RiderId;
      }
      if (other.F3 != 0) {
        F3 = other.F3;
      }
      if (other.F4 != 0L) {
        F4 = other.F4;
      }
      if (other.F5 != 0L) {
        F5 = other.F5;
      }
      if (other.F6 != 0L) {
        F6 = other.F6;
      }
      if (other.FirstName.Length != 0) {
        FirstName = other.FirstName;
      }
      if (other.LastName.Length != 0) {
        LastName = other.LastName;
      }
      if (other.F9 != 0L) {
        F9 = other.F9;
      }
      if (other.F11 != 0L) {
        F11 = other.F11;
      }
      if (other.F12 != 0) {
        F12 = other.F12;
      }
      if (other.F13 != 0) {
        F13 = other.F13;
      }
      if (other.F14 != 0) {
        F14 = other.F14;
      }
      if (other.F15 != 0) {
        F15 = other.F15;
      }
      if (other.F16 != 0) {
        F16 = other.F16;
      }
      if (other.F7Date.Length != 0) {
        F7Date = other.F7Date;
      }
      if (other.F19 != 0) {
        F19 = other.F19;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            F1 = input.ReadInt64();
            break;
          }
          case 16: {
            RiderId = input.ReadInt32();
            break;
          }
          case 24: {
            F3 = input.ReadInt32();
            break;
          }
          case 32: {
            F4 = input.ReadInt64();
            break;
          }
          case 40: {
            F5 = input.ReadInt64();
            break;
          }
          case 48: {
            F6 = input.ReadInt64();
            break;
          }
          case 58: {
            FirstName = input.ReadString();
            break;
          }
          case 66: {
            LastName = input.ReadString();
            break;
          }
          case 72: {
            F9 = input.ReadInt64();
            break;
          }
          case 88: {
            F11 = input.ReadInt64();
            break;
          }
          case 96: {
            F12 = input.ReadInt32();
            break;
          }
          case 104: {
            F13 = input.ReadInt32();
            break;
          }
          case 112: {
            F14 = input.ReadInt32();
            break;
          }
          case 120: {
            F15 = input.ReadInt32();
            break;
          }
          case 128: {
            F16 = input.ReadInt32();
            break;
          }
          case 138: {
            F7Date = input.ReadString();
            break;
          }
          case 152: {
            F19 = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            F1 = input.ReadInt64();
            break;
          }
          case 16: {
            RiderId = input.ReadInt32();
            break;
          }
          case 24: {
            F3 = input.ReadInt32();
            break;
          }
          case 32: {
            F4 = input.ReadInt64();
            break;
          }
          case 40: {
            F5 = input.ReadInt64();
            break;
          }
          case 48: {
            F6 = input.ReadInt64();
            break;
          }
          case 58: {
            FirstName = input.ReadString();
            break;
          }
          case 66: {
            LastName = input.ReadString();
            break;
          }
          case 72: {
            F9 = input.ReadInt64();
            break;
          }
          case 88: {
            F11 = input.ReadInt64();
            break;
          }
          case 96: {
            F12 = input.ReadInt32();
            break;
          }
          case 104: {
            F13 = input.ReadInt32();
            break;
          }
          case 112: {
            F14 = input.ReadInt32();
            break;
          }
          case 120: {
            F15 = input.ReadInt32();
            break;
          }
          case 128: {
            F16 = input.ReadInt32();
            break;
          }
          case 138: {
            F7Date = input.ReadString();
            break;
          }
          case 152: {
            F19 = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// chat message
  /// </summary>
  public sealed partial class Payload5 : pb::IMessage<Payload5>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Payload5> _parser = new pb::MessageParser<Payload5>(() => new Payload5());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Payload5> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload5() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload5(Payload5 other) : this() {
      riderId_ = other.riderId_;
      toRiderId_ = other.toRiderId_;
      f3_ = other.f3_;
      firstName_ = other.firstName_;
      lastName_ = other.lastName_;
      message_ = other.message_;
      avatar_ = other.avatar_;
      countryCode_ = other.countryCode_;
      eventSubgroup_ = other.eventSubgroup_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload5 Clone() {
      return new Payload5(this);
    }

    /// <summary>Field number for the "rider_id" field.</summary>
    public const int RiderIdFieldNumber = 1;
    private int riderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RiderId {
      get { return riderId_; }
      set {
        riderId_ = value;
      }
    }

    /// <summary>Field number for the "to_rider_id" field.</summary>
    public const int ToRiderIdFieldNumber = 2;
    private int toRiderId_;
    /// <summary>
    /// 0 if public message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ToRiderId {
      get { return toRiderId_; }
      set {
        toRiderId_ = value;
      }
    }

    /// <summary>Field number for the "f3" field.</summary>
    public const int F3FieldNumber = 3;
    private int f3_;
    /// <summary>
    /// always value 1 ?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F3 {
      get { return f3_; }
      set {
        f3_ = value;
      }
    }

    /// <summary>Field number for the "firstName" field.</summary>
    public const int FirstNameFieldNumber = 4;
    private string firstName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirstName {
      get { return firstName_; }
      set {
        firstName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lastName" field.</summary>
    public const int LastNameFieldNumber = 5;
    private string lastName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastName {
      get { return lastName_; }
      set {
        lastName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 6;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 7;
    private string avatar_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Avatar {
      get { return avatar_; }
      set {
        avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "countryCode" field.</summary>
    public const int CountryCodeFieldNumber = 8;
    private int countryCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CountryCode {
      get { return countryCode_; }
      set {
        countryCode_ = value;
      }
    }

    /// <summary>Field number for the "eventSubgroup" field.</summary>
    public const int EventSubgroupFieldNumber = 11;
    private int eventSubgroup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventSubgroup {
      get { return eventSubgroup_; }
      set {
        eventSubgroup_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Payload5);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Payload5 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RiderId != other.RiderId) return false;
      if (ToRiderId != other.ToRiderId) return false;
      if (F3 != other.F3) return false;
      if (FirstName != other.FirstName) return false;
      if (LastName != other.LastName) return false;
      if (Message != other.Message) return false;
      if (Avatar != other.Avatar) return false;
      if (CountryCode != other.CountryCode) return false;
      if (EventSubgroup != other.EventSubgroup) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RiderId != 0) hash ^= RiderId.GetHashCode();
      if (ToRiderId != 0) hash ^= ToRiderId.GetHashCode();
      if (F3 != 0) hash ^= F3.GetHashCode();
      if (FirstName.Length != 0) hash ^= FirstName.GetHashCode();
      if (LastName.Length != 0) hash ^= LastName.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
      if (CountryCode != 0) hash ^= CountryCode.GetHashCode();
      if (EventSubgroup != 0) hash ^= EventSubgroup.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RiderId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RiderId);
      }
      if (ToRiderId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ToRiderId);
      }
      if (F3 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(F3);
      }
      if (FirstName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FirstName);
      }
      if (LastName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LastName);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Message);
      }
      if (Avatar.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Avatar);
      }
      if (CountryCode != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CountryCode);
      }
      if (EventSubgroup != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(EventSubgroup);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RiderId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RiderId);
      }
      if (ToRiderId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ToRiderId);
      }
      if (F3 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(F3);
      }
      if (FirstName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FirstName);
      }
      if (LastName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LastName);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Message);
      }
      if (Avatar.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Avatar);
      }
      if (CountryCode != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CountryCode);
      }
      if (EventSubgroup != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(EventSubgroup);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RiderId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RiderId);
      }
      if (ToRiderId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToRiderId);
      }
      if (F3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F3);
      }
      if (FirstName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstName);
      }
      if (LastName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastName);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Avatar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
      }
      if (CountryCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CountryCode);
      }
      if (EventSubgroup != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventSubgroup);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Payload5 other) {
      if (other == null) {
        return;
      }
      if (other.RiderId != 0) {
        RiderId = other.RiderId;
      }
      if (other.ToRiderId != 0) {
        ToRiderId = other.ToRiderId;
      }
      if (other.F3 != 0) {
        F3 = other.F3;
      }
      if (other.FirstName.Length != 0) {
        FirstName = other.FirstName;
      }
      if (other.LastName.Length != 0) {
        LastName = other.LastName;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.Avatar.Length != 0) {
        Avatar = other.Avatar;
      }
      if (other.CountryCode != 0) {
        CountryCode = other.CountryCode;
      }
      if (other.EventSubgroup != 0) {
        EventSubgroup = other.EventSubgroup;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RiderId = input.ReadInt32();
            break;
          }
          case 16: {
            ToRiderId = input.ReadInt32();
            break;
          }
          case 24: {
            F3 = input.ReadInt32();
            break;
          }
          case 34: {
            FirstName = input.ReadString();
            break;
          }
          case 42: {
            LastName = input.ReadString();
            break;
          }
          case 50: {
            Message = input.ReadString();
            break;
          }
          case 58: {
            Avatar = input.ReadString();
            break;
          }
          case 64: {
            CountryCode = input.ReadInt32();
            break;
          }
          case 88: {
            EventSubgroup = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RiderId = input.ReadInt32();
            break;
          }
          case 16: {
            ToRiderId = input.ReadInt32();
            break;
          }
          case 24: {
            F3 = input.ReadInt32();
            break;
          }
          case 34: {
            FirstName = input.ReadString();
            break;
          }
          case 42: {
            LastName = input.ReadString();
            break;
          }
          case 50: {
            Message = input.ReadString();
            break;
          }
          case 58: {
            Avatar = input.ReadString();
            break;
          }
          case 64: {
            CountryCode = input.ReadInt32();
            break;
          }
          case 88: {
            EventSubgroup = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ride on
  /// </summary>
  public sealed partial class Payload4 : pb::IMessage<Payload4>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Payload4> _parser = new pb::MessageParser<Payload4>(() => new Payload4());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Payload4> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload4() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload4(Payload4 other) : this() {
      riderId_ = other.riderId_;
      toRiderId_ = other.toRiderId_;
      firstName_ = other.firstName_;
      lastName_ = other.lastName_;
      countryCode_ = other.countryCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload4 Clone() {
      return new Payload4(this);
    }

    /// <summary>Field number for the "rider_id" field.</summary>
    public const int RiderIdFieldNumber = 1;
    private int riderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RiderId {
      get { return riderId_; }
      set {
        riderId_ = value;
      }
    }

    /// <summary>Field number for the "to_rider_id" field.</summary>
    public const int ToRiderIdFieldNumber = 2;
    private int toRiderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ToRiderId {
      get { return toRiderId_; }
      set {
        toRiderId_ = value;
      }
    }

    /// <summary>Field number for the "firstName" field.</summary>
    public const int FirstNameFieldNumber = 3;
    private string firstName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirstName {
      get { return firstName_; }
      set {
        firstName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lastName" field.</summary>
    public const int LastNameFieldNumber = 4;
    private string lastName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastName {
      get { return lastName_; }
      set {
        lastName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "countryCode" field.</summary>
    public const int CountryCodeFieldNumber = 5;
    private int countryCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CountryCode {
      get { return countryCode_; }
      set {
        countryCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Payload4);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Payload4 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RiderId != other.RiderId) return false;
      if (ToRiderId != other.ToRiderId) return false;
      if (FirstName != other.FirstName) return false;
      if (LastName != other.LastName) return false;
      if (CountryCode != other.CountryCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RiderId != 0) hash ^= RiderId.GetHashCode();
      if (ToRiderId != 0) hash ^= ToRiderId.GetHashCode();
      if (FirstName.Length != 0) hash ^= FirstName.GetHashCode();
      if (LastName.Length != 0) hash ^= LastName.GetHashCode();
      if (CountryCode != 0) hash ^= CountryCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RiderId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RiderId);
      }
      if (ToRiderId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ToRiderId);
      }
      if (FirstName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FirstName);
      }
      if (LastName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LastName);
      }
      if (CountryCode != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CountryCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RiderId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RiderId);
      }
      if (ToRiderId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ToRiderId);
      }
      if (FirstName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FirstName);
      }
      if (LastName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LastName);
      }
      if (CountryCode != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CountryCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RiderId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RiderId);
      }
      if (ToRiderId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToRiderId);
      }
      if (FirstName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstName);
      }
      if (LastName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastName);
      }
      if (CountryCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CountryCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Payload4 other) {
      if (other == null) {
        return;
      }
      if (other.RiderId != 0) {
        RiderId = other.RiderId;
      }
      if (other.ToRiderId != 0) {
        ToRiderId = other.ToRiderId;
      }
      if (other.FirstName.Length != 0) {
        FirstName = other.FirstName;
      }
      if (other.LastName.Length != 0) {
        LastName = other.LastName;
      }
      if (other.CountryCode != 0) {
        CountryCode = other.CountryCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RiderId = input.ReadInt32();
            break;
          }
          case 16: {
            ToRiderId = input.ReadInt32();
            break;
          }
          case 26: {
            FirstName = input.ReadString();
            break;
          }
          case 34: {
            LastName = input.ReadString();
            break;
          }
          case 40: {
            CountryCode = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RiderId = input.ReadInt32();
            break;
          }
          case 16: {
            ToRiderId = input.ReadInt32();
            break;
          }
          case 26: {
            FirstName = input.ReadString();
            break;
          }
          case 34: {
            LastName = input.ReadString();
            break;
          }
          case 40: {
            CountryCode = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Payload2 : pb::IMessage<Payload2>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Payload2> _parser = new pb::MessageParser<Payload2>(() => new Payload2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Payload2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload2(Payload2 other) : this() {
      f1_ = other.f1_;
      f2_ = other.f2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload2 Clone() {
      return new Payload2(this);
    }

    /// <summary>Field number for the "f1" field.</summary>
    public const int F1FieldNumber = 1;
    private int f1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F1 {
      get { return f1_; }
      set {
        f1_ = value;
      }
    }

    /// <summary>Field number for the "f2" field.</summary>
    public const int F2FieldNumber = 2;
    private long f2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long F2 {
      get { return f2_; }
      set {
        f2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Payload2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Payload2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (F1 != other.F1) return false;
      if (F2 != other.F2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (F1 != 0) hash ^= F1.GetHashCode();
      if (F2 != 0L) hash ^= F2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (F1 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(F1);
      }
      if (F2 != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(F2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (F1 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(F1);
      }
      if (F2 != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(F2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (F1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F1);
      }
      if (F2 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(F2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Payload2 other) {
      if (other == null) {
        return;
      }
      if (other.F1 != 0) {
        F1 = other.F1;
      }
      if (other.F2 != 0L) {
        F2 = other.F2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            F1 = input.ReadInt32();
            break;
          }
          case 16: {
            F2 = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            F1 = input.ReadInt32();
            break;
          }
          case 16: {
            F2 = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Payload3 : pb::IMessage<Payload3>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Payload3> _parser = new pb::MessageParser<Payload3>(() => new Payload3());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Payload3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload3(Payload3 other) : this() {
      f1_ = other.f1_;
      f2_ = other.f2_;
      f3_ = other.f3_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload3 Clone() {
      return new Payload3(this);
    }

    /// <summary>Field number for the "f1" field.</summary>
    public const int F1FieldNumber = 1;
    private int f1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F1 {
      get { return f1_; }
      set {
        f1_ = value;
      }
    }

    /// <summary>Field number for the "f2" field.</summary>
    public const int F2FieldNumber = 2;
    private long f2_;
    /// <summary>
    /// worldtime ?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long F2 {
      get { return f2_; }
      set {
        f2_ = value;
      }
    }

    /// <summary>Field number for the "f3" field.</summary>
    public const int F3FieldNumber = 3;
    private int f3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F3 {
      get { return f3_; }
      set {
        f3_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Payload3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Payload3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (F1 != other.F1) return false;
      if (F2 != other.F2) return false;
      if (F3 != other.F3) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (F1 != 0) hash ^= F1.GetHashCode();
      if (F2 != 0L) hash ^= F2.GetHashCode();
      if (F3 != 0) hash ^= F3.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (F1 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(F1);
      }
      if (F2 != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(F2);
      }
      if (F3 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(F3);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (F1 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(F1);
      }
      if (F2 != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(F2);
      }
      if (F3 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(F3);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (F1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F1);
      }
      if (F2 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(F2);
      }
      if (F3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F3);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Payload3 other) {
      if (other == null) {
        return;
      }
      if (other.F1 != 0) {
        F1 = other.F1;
      }
      if (other.F2 != 0L) {
        F2 = other.F2;
      }
      if (other.F3 != 0) {
        F3 = other.F3;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            F1 = input.ReadInt32();
            break;
          }
          case 16: {
            F2 = input.ReadInt64();
            break;
          }
          case 24: {
            F3 = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            F1 = input.ReadInt32();
            break;
          }
          case 16: {
            F2 = input.ReadInt64();
            break;
          }
          case 24: {
            F3 = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// format to be determined
  /// </summary>
  public sealed partial class Payload110 : pb::IMessage<Payload110>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Payload110> _parser = new pb::MessageParser<Payload110>(() => new Payload110());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Payload110> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload110() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload110(Payload110 other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload110 Clone() {
      return new Payload110(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Payload110);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Payload110 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Payload110 other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  /// format to be determined
  /// </summary>
  public sealed partial class Payload109 : pb::IMessage<Payload109>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Payload109> _parser = new pb::MessageParser<Payload109>(() => new Payload109());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Payload109> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload109() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload109(Payload109 other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload109 Clone() {
      return new Payload109(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Payload109);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Payload109 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Payload109 other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class EventPositions : pb::IMessage<EventPositions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventPositions> _parser = new pb::MessageParser<EventPositions>(() => new EventPositions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventPositions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPositions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPositions(EventPositions other) : this() {
      position_ = other.position_;
      eventRiderPosition_ = other.eventRiderPosition_.Clone();
      numRiders_ = other.numRiders_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPositions Clone() {
      return new EventPositions(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private int position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "eventRiderPosition" field.</summary>
    public const int EventRiderPositionFieldNumber = 4;
    private static readonly pb::FieldCodec<global::ZwiftPacketMonitor.EventPositions.Types.EventRiderPosition> _repeated_eventRiderPosition_codec
        = pb::FieldCodec.ForMessage(34, global::ZwiftPacketMonitor.EventPositions.Types.EventRiderPosition.Parser);
    private readonly pbc::RepeatedField<global::ZwiftPacketMonitor.EventPositions.Types.EventRiderPosition> eventRiderPosition_ = new pbc::RepeatedField<global::ZwiftPacketMonitor.EventPositions.Types.EventRiderPosition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ZwiftPacketMonitor.EventPositions.Types.EventRiderPosition> EventRiderPosition {
      get { return eventRiderPosition_; }
    }

    /// <summary>Field number for the "num_riders" field.</summary>
    public const int NumRidersFieldNumber = 116;
    private int numRiders_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumRiders {
      get { return numRiders_; }
      set {
        numRiders_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventPositions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventPositions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Position != other.Position) return false;
      if(!eventRiderPosition_.Equals(other.eventRiderPosition_)) return false;
      if (NumRiders != other.NumRiders) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Position != 0) hash ^= Position.GetHashCode();
      hash ^= eventRiderPosition_.GetHashCode();
      if (NumRiders != 0) hash ^= NumRiders.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Position != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Position);
      }
      eventRiderPosition_.WriteTo(output, _repeated_eventRiderPosition_codec);
      if (NumRiders != 0) {
        output.WriteRawTag(160, 7);
        output.WriteInt32(NumRiders);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Position != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Position);
      }
      eventRiderPosition_.WriteTo(ref output, _repeated_eventRiderPosition_codec);
      if (NumRiders != 0) {
        output.WriteRawTag(160, 7);
        output.WriteInt32(NumRiders);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      size += eventRiderPosition_.CalculateSize(_repeated_eventRiderPosition_codec);
      if (NumRiders != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumRiders);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventPositions other) {
      if (other == null) {
        return;
      }
      if (other.Position != 0) {
        Position = other.Position;
      }
      eventRiderPosition_.Add(other.eventRiderPosition_);
      if (other.NumRiders != 0) {
        NumRiders = other.NumRiders;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Position = input.ReadInt32();
            break;
          }
          case 34: {
            eventRiderPosition_.AddEntriesFrom(input, _repeated_eventRiderPosition_codec);
            break;
          }
          case 928: {
            NumRiders = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Position = input.ReadInt32();
            break;
          }
          case 34: {
            eventRiderPosition_.AddEntriesFrom(ref input, _repeated_eventRiderPosition_codec);
            break;
          }
          case 928: {
            NumRiders = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the EventPositions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class EventRiderPosition : pb::IMessage<EventRiderPosition>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<EventRiderPosition> _parser = new pb::MessageParser<EventRiderPosition>(() => new EventRiderPosition());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EventRiderPosition> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::ZwiftPacketMonitor.EventPositions.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EventRiderPosition() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EventRiderPosition(EventRiderPosition other) : this() {
          riderId_ = other.riderId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EventRiderPosition Clone() {
          return new EventRiderPosition(this);
        }

        /// <summary>Field number for the "rider_id" field.</summary>
        public const int RiderIdFieldNumber = 1;
        private int riderId_;
        /// <summary>
        /// ?? float distance_covered = 2; 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RiderId {
          get { return riderId_; }
          set {
            riderId_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EventRiderPosition);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EventRiderPosition other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (RiderId != other.RiderId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (RiderId != 0) hash ^= RiderId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (RiderId != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(RiderId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (RiderId != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(RiderId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RiderId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(RiderId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EventRiderPosition other) {
          if (other == null) {
            return;
          }
          if (other.RiderId != 0) {
            RiderId = other.RiderId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                RiderId = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                RiderId = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class ServerToClient : pb::IMessage<ServerToClient>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ServerToClient> _parser = new pb::MessageParser<ServerToClient>(() => new ServerToClient());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerToClient> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerToClient() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerToClient(ServerToClient other) : this() {
      tag1_ = other.tag1_;
      riderId_ = other.riderId_;
      worldTime_ = other.worldTime_;
      seqno_ = other.seqno_;
      playerStates_ = other.playerStates_.Clone();
      playerUpdates_ = other.playerUpdates_.Clone();
      tag11_ = other.tag11_;
      tag17_ = other.tag17_;
      numMsgs_ = other.numMsgs_;
      msgnum_ = other.msgnum_;
      eventPositions_ = other.eventPositions_ != null ? other.eventPositions_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerToClient Clone() {
      return new ServerToClient(this);
    }

    /// <summary>Field number for the "tag1" field.</summary>
    public const int Tag1FieldNumber = 1;
    private int tag1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tag1 {
      get { return tag1_; }
      set {
        tag1_ = value;
      }
    }

    /// <summary>Field number for the "rider_id" field.</summary>
    public const int RiderIdFieldNumber = 2;
    private int riderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RiderId {
      get { return riderId_; }
      set {
        riderId_ = value;
      }
    }

    /// <summary>Field number for the "world_time" field.</summary>
    public const int WorldTimeFieldNumber = 3;
    private long worldTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WorldTime {
      get { return worldTime_; }
      set {
        worldTime_ = value;
      }
    }

    /// <summary>Field number for the "seqno" field.</summary>
    public const int SeqnoFieldNumber = 4;
    private int seqno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seqno {
      get { return seqno_; }
      set {
        seqno_ = value;
      }
    }

    /// <summary>Field number for the "player_states" field.</summary>
    public const int PlayerStatesFieldNumber = 8;
    private static readonly pb::FieldCodec<global::ZwiftPacketMonitor.PlayerState> _repeated_playerStates_codec
        = pb::FieldCodec.ForMessage(66, global::ZwiftPacketMonitor.PlayerState.Parser);
    private readonly pbc::RepeatedField<global::ZwiftPacketMonitor.PlayerState> playerStates_ = new pbc::RepeatedField<global::ZwiftPacketMonitor.PlayerState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ZwiftPacketMonitor.PlayerState> PlayerStates {
      get { return playerStates_; }
    }

    /// <summary>Field number for the "player_updates" field.</summary>
    public const int PlayerUpdatesFieldNumber = 9;
    private static readonly pb::FieldCodec<global::ZwiftPacketMonitor.PlayerUpdate> _repeated_playerUpdates_codec
        = pb::FieldCodec.ForMessage(74, global::ZwiftPacketMonitor.PlayerUpdate.Parser);
    private readonly pbc::RepeatedField<global::ZwiftPacketMonitor.PlayerUpdate> playerUpdates_ = new pbc::RepeatedField<global::ZwiftPacketMonitor.PlayerUpdate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ZwiftPacketMonitor.PlayerUpdate> PlayerUpdates {
      get { return playerUpdates_; }
    }

    /// <summary>Field number for the "tag11" field.</summary>
    public const int Tag11FieldNumber = 11;
    private long tag11_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Tag11 {
      get { return tag11_; }
      set {
        tag11_ = value;
      }
    }

    /// <summary>Field number for the "tag17" field.</summary>
    public const int Tag17FieldNumber = 17;
    private long tag17_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Tag17 {
      get { return tag17_; }
      set {
        tag17_ = value;
      }
    }

    /// <summary>Field number for the "num_msgs" field.</summary>
    public const int NumMsgsFieldNumber = 18;
    private int numMsgs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumMsgs {
      get { return numMsgs_; }
      set {
        numMsgs_ = value;
      }
    }

    /// <summary>Field number for the "msgnum" field.</summary>
    public const int MsgnumFieldNumber = 19;
    private int msgnum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Msgnum {
      get { return msgnum_; }
      set {
        msgnum_ = value;
      }
    }

    /// <summary>Field number for the "event_positions" field.</summary>
    public const int EventPositionsFieldNumber = 23;
    private global::ZwiftPacketMonitor.EventPositions eventPositions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ZwiftPacketMonitor.EventPositions EventPositions {
      get { return eventPositions_; }
      set {
        eventPositions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerToClient);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerToClient other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag1 != other.Tag1) return false;
      if (RiderId != other.RiderId) return false;
      if (WorldTime != other.WorldTime) return false;
      if (Seqno != other.Seqno) return false;
      if(!playerStates_.Equals(other.playerStates_)) return false;
      if(!playerUpdates_.Equals(other.playerUpdates_)) return false;
      if (Tag11 != other.Tag11) return false;
      if (Tag17 != other.Tag17) return false;
      if (NumMsgs != other.NumMsgs) return false;
      if (Msgnum != other.Msgnum) return false;
      if (!object.Equals(EventPositions, other.EventPositions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tag1 != 0) hash ^= Tag1.GetHashCode();
      if (RiderId != 0) hash ^= RiderId.GetHashCode();
      if (WorldTime != 0L) hash ^= WorldTime.GetHashCode();
      if (Seqno != 0) hash ^= Seqno.GetHashCode();
      hash ^= playerStates_.GetHashCode();
      hash ^= playerUpdates_.GetHashCode();
      if (Tag11 != 0L) hash ^= Tag11.GetHashCode();
      if (Tag17 != 0L) hash ^= Tag17.GetHashCode();
      if (NumMsgs != 0) hash ^= NumMsgs.GetHashCode();
      if (Msgnum != 0) hash ^= Msgnum.GetHashCode();
      if (eventPositions_ != null) hash ^= EventPositions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Tag1 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Tag1);
      }
      if (RiderId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RiderId);
      }
      if (WorldTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(WorldTime);
      }
      if (Seqno != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Seqno);
      }
      playerStates_.WriteTo(output, _repeated_playerStates_codec);
      playerUpdates_.WriteTo(output, _repeated_playerUpdates_codec);
      if (Tag11 != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(Tag11);
      }
      if (Tag17 != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(Tag17);
      }
      if (NumMsgs != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(NumMsgs);
      }
      if (Msgnum != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Msgnum);
      }
      if (eventPositions_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(EventPositions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Tag1 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Tag1);
      }
      if (RiderId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RiderId);
      }
      if (WorldTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(WorldTime);
      }
      if (Seqno != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Seqno);
      }
      playerStates_.WriteTo(ref output, _repeated_playerStates_codec);
      playerUpdates_.WriteTo(ref output, _repeated_playerUpdates_codec);
      if (Tag11 != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(Tag11);
      }
      if (Tag17 != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(Tag17);
      }
      if (NumMsgs != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(NumMsgs);
      }
      if (Msgnum != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Msgnum);
      }
      if (eventPositions_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(EventPositions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tag1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tag1);
      }
      if (RiderId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RiderId);
      }
      if (WorldTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WorldTime);
      }
      if (Seqno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seqno);
      }
      size += playerStates_.CalculateSize(_repeated_playerStates_codec);
      size += playerUpdates_.CalculateSize(_repeated_playerUpdates_codec);
      if (Tag11 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tag11);
      }
      if (Tag17 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Tag17);
      }
      if (NumMsgs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumMsgs);
      }
      if (Msgnum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Msgnum);
      }
      if (eventPositions_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EventPositions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerToClient other) {
      if (other == null) {
        return;
      }
      if (other.Tag1 != 0) {
        Tag1 = other.Tag1;
      }
      if (other.RiderId != 0) {
        RiderId = other.RiderId;
      }
      if (other.WorldTime != 0L) {
        WorldTime = other.WorldTime;
      }
      if (other.Seqno != 0) {
        Seqno = other.Seqno;
      }
      playerStates_.Add(other.playerStates_);
      playerUpdates_.Add(other.playerUpdates_);
      if (other.Tag11 != 0L) {
        Tag11 = other.Tag11;
      }
      if (other.Tag17 != 0L) {
        Tag17 = other.Tag17;
      }
      if (other.NumMsgs != 0) {
        NumMsgs = other.NumMsgs;
      }
      if (other.Msgnum != 0) {
        Msgnum = other.Msgnum;
      }
      if (other.eventPositions_ != null) {
        if (eventPositions_ == null) {
          EventPositions = new global::ZwiftPacketMonitor.EventPositions();
        }
        EventPositions.MergeFrom(other.EventPositions);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Tag1 = input.ReadInt32();
            break;
          }
          case 16: {
            RiderId = input.ReadInt32();
            break;
          }
          case 24: {
            WorldTime = input.ReadInt64();
            break;
          }
          case 32: {
            Seqno = input.ReadInt32();
            break;
          }
          case 66: {
            playerStates_.AddEntriesFrom(input, _repeated_playerStates_codec);
            break;
          }
          case 74: {
            playerUpdates_.AddEntriesFrom(input, _repeated_playerUpdates_codec);
            break;
          }
          case 88: {
            Tag11 = input.ReadInt64();
            break;
          }
          case 136: {
            Tag17 = input.ReadInt64();
            break;
          }
          case 144: {
            NumMsgs = input.ReadInt32();
            break;
          }
          case 152: {
            Msgnum = input.ReadInt32();
            break;
          }
          case 186: {
            if (eventPositions_ == null) {
              EventPositions = new global::ZwiftPacketMonitor.EventPositions();
            }
            input.ReadMessage(EventPositions);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Tag1 = input.ReadInt32();
            break;
          }
          case 16: {
            RiderId = input.ReadInt32();
            break;
          }
          case 24: {
            WorldTime = input.ReadInt64();
            break;
          }
          case 32: {
            Seqno = input.ReadInt32();
            break;
          }
          case 66: {
            playerStates_.AddEntriesFrom(ref input, _repeated_playerStates_codec);
            break;
          }
          case 74: {
            playerUpdates_.AddEntriesFrom(ref input, _repeated_playerUpdates_codec);
            break;
          }
          case 88: {
            Tag11 = input.ReadInt64();
            break;
          }
          case 136: {
            Tag17 = input.ReadInt64();
            break;
          }
          case 144: {
            NumMsgs = input.ReadInt32();
            break;
          }
          case 152: {
            Msgnum = input.ReadInt32();
            break;
          }
          case 186: {
            if (eventPositions_ == null) {
              EventPositions = new global::ZwiftPacketMonitor.EventPositions();
            }
            input.ReadMessage(EventPositions);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class WorldAttributes : pb::IMessage<WorldAttributes>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WorldAttributes> _parser = new pb::MessageParser<WorldAttributes>(() => new WorldAttributes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorldAttributes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldAttributes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldAttributes(WorldAttributes other) : this() {
      worldId_ = other.worldId_;
      name_ = other.name_;
      tag3_ = other.tag3_;
      tag5_ = other.tag5_;
      worldTime_ = other.worldTime_;
      clockTime_ = other.clockTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldAttributes Clone() {
      return new WorldAttributes(this);
    }

    /// <summary>Field number for the "world_id" field.</summary>
    public const int WorldIdFieldNumber = 1;
    private int worldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WorldId {
      get { return worldId_; }
      set {
        worldId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tag3" field.</summary>
    public const int Tag3FieldNumber = 3;
    private long tag3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Tag3 {
      get { return tag3_; }
      set {
        tag3_ = value;
      }
    }

    /// <summary>Field number for the "tag5" field.</summary>
    public const int Tag5FieldNumber = 4;
    private long tag5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Tag5 {
      get { return tag5_; }
      set {
        tag5_ = value;
      }
    }

    /// <summary>Field number for the "world_time" field.</summary>
    public const int WorldTimeFieldNumber = 6;
    private long worldTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WorldTime {
      get { return worldTime_; }
      set {
        worldTime_ = value;
      }
    }

    /// <summary>Field number for the "clock_time" field.</summary>
    public const int ClockTimeFieldNumber = 7;
    private long clockTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ClockTime {
      get { return clockTime_; }
      set {
        clockTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorldAttributes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorldAttributes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WorldId != other.WorldId) return false;
      if (Name != other.Name) return false;
      if (Tag3 != other.Tag3) return false;
      if (Tag5 != other.Tag5) return false;
      if (WorldTime != other.WorldTime) return false;
      if (ClockTime != other.ClockTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WorldId != 0) hash ^= WorldId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Tag3 != 0L) hash ^= Tag3.GetHashCode();
      if (Tag5 != 0L) hash ^= Tag5.GetHashCode();
      if (WorldTime != 0L) hash ^= WorldTime.GetHashCode();
      if (ClockTime != 0L) hash ^= ClockTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WorldId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WorldId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Tag3 != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Tag3);
      }
      if (Tag5 != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Tag5);
      }
      if (WorldTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(WorldTime);
      }
      if (ClockTime != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(ClockTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WorldId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WorldId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Tag3 != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Tag3);
      }
      if (Tag5 != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Tag5);
      }
      if (WorldTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(WorldTime);
      }
      if (ClockTime != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(ClockTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WorldId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WorldId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Tag3 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tag3);
      }
      if (Tag5 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tag5);
      }
      if (WorldTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WorldTime);
      }
      if (ClockTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClockTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorldAttributes other) {
      if (other == null) {
        return;
      }
      if (other.WorldId != 0) {
        WorldId = other.WorldId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Tag3 != 0L) {
        Tag3 = other.Tag3;
      }
      if (other.Tag5 != 0L) {
        Tag5 = other.Tag5;
      }
      if (other.WorldTime != 0L) {
        WorldTime = other.WorldTime;
      }
      if (other.ClockTime != 0L) {
        ClockTime = other.ClockTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WorldId = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Tag3 = input.ReadInt64();
            break;
          }
          case 32: {
            Tag5 = input.ReadInt64();
            break;
          }
          case 48: {
            WorldTime = input.ReadInt64();
            break;
          }
          case 56: {
            ClockTime = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            WorldId = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Tag3 = input.ReadInt64();
            break;
          }
          case 32: {
            Tag5 = input.ReadInt64();
            break;
          }
          case 48: {
            WorldTime = input.ReadInt64();
            break;
          }
          case 56: {
            ClockTime = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class WorldAttribute : pb::IMessage<WorldAttribute>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WorldAttribute> _parser = new pb::MessageParser<WorldAttribute>(() => new WorldAttribute());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorldAttribute> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldAttribute() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldAttribute(WorldAttribute other) : this() {
      worldTime_ = other.worldTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldAttribute Clone() {
      return new WorldAttribute(this);
    }

    /// <summary>Field number for the "world_time" field.</summary>
    public const int WorldTimeFieldNumber = 2;
    private long worldTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WorldTime {
      get { return worldTime_; }
      set {
        worldTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorldAttribute);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorldAttribute other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WorldTime != other.WorldTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WorldTime != 0L) hash ^= WorldTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WorldTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(WorldTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WorldTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(WorldTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WorldTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WorldTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorldAttribute other) {
      if (other == null) {
        return;
      }
      if (other.WorldTime != 0L) {
        WorldTime = other.WorldTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            WorldTime = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 16: {
            WorldTime = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventSubgroupProtobuf : pb::IMessage<EventSubgroupProtobuf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventSubgroupProtobuf> _parser = new pb::MessageParser<EventSubgroupProtobuf>(() => new EventSubgroupProtobuf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventSubgroupProtobuf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSubgroupProtobuf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSubgroupProtobuf(EventSubgroupProtobuf other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      rules_ = other.rules_;
      route_ = other.route_;
      laps_ = other.laps_;
      startLocation_ = other.startLocation_;
      label_ = other.label_;
      paceType_ = other.paceType_;
      jerseyHash_ = other.jerseyHash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSubgroupProtobuf Clone() {
      return new EventSubgroupProtobuf(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rules" field.</summary>
    public const int RulesFieldNumber = 8;
    private int rules_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rules {
      get { return rules_; }
      set {
        rules_ = value;
      }
    }

    /// <summary>Field number for the "route" field.</summary>
    public const int RouteFieldNumber = 22;
    private int route_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Route {
      get { return route_; }
      set {
        route_ = value;
      }
    }

    /// <summary>Field number for the "laps" field.</summary>
    public const int LapsFieldNumber = 25;
    private int laps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Laps {
      get { return laps_; }
      set {
        laps_ = value;
      }
    }

    /// <summary>Field number for the "startLocation" field.</summary>
    public const int StartLocationFieldNumber = 29;
    private int startLocation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartLocation {
      get { return startLocation_; }
      set {
        startLocation_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 30;
    private int label_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Label {
      get { return label_; }
      set {
        label_ = value;
      }
    }

    /// <summary>Field number for the "paceType" field.</summary>
    public const int PaceTypeFieldNumber = 31;
    private int paceType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PaceType {
      get { return paceType_; }
      set {
        paceType_ = value;
      }
    }

    /// <summary>Field number for the "jerseyHash" field.</summary>
    public const int JerseyHashFieldNumber = 36;
    private int jerseyHash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JerseyHash {
      get { return jerseyHash_; }
      set {
        jerseyHash_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventSubgroupProtobuf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventSubgroupProtobuf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Rules != other.Rules) return false;
      if (Route != other.Route) return false;
      if (Laps != other.Laps) return false;
      if (StartLocation != other.StartLocation) return false;
      if (Label != other.Label) return false;
      if (PaceType != other.PaceType) return false;
      if (JerseyHash != other.JerseyHash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Rules != 0) hash ^= Rules.GetHashCode();
      if (Route != 0) hash ^= Route.GetHashCode();
      if (Laps != 0) hash ^= Laps.GetHashCode();
      if (StartLocation != 0) hash ^= StartLocation.GetHashCode();
      if (Label != 0) hash ^= Label.GetHashCode();
      if (PaceType != 0) hash ^= PaceType.GetHashCode();
      if (JerseyHash != 0) hash ^= JerseyHash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Rules != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Rules);
      }
      if (Route != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(Route);
      }
      if (Laps != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(Laps);
      }
      if (StartLocation != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(StartLocation);
      }
      if (Label != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(Label);
      }
      if (PaceType != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(PaceType);
      }
      if (JerseyHash != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(JerseyHash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Rules != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Rules);
      }
      if (Route != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(Route);
      }
      if (Laps != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(Laps);
      }
      if (StartLocation != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(StartLocation);
      }
      if (Label != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(Label);
      }
      if (PaceType != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(PaceType);
      }
      if (JerseyHash != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(JerseyHash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Rules != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rules);
      }
      if (Route != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Route);
      }
      if (Laps != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Laps);
      }
      if (StartLocation != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StartLocation);
      }
      if (Label != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Label);
      }
      if (PaceType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PaceType);
      }
      if (JerseyHash != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(JerseyHash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventSubgroupProtobuf other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Rules != 0) {
        Rules = other.Rules;
      }
      if (other.Route != 0) {
        Route = other.Route;
      }
      if (other.Laps != 0) {
        Laps = other.Laps;
      }
      if (other.StartLocation != 0) {
        StartLocation = other.StartLocation;
      }
      if (other.Label != 0) {
        Label = other.Label;
      }
      if (other.PaceType != 0) {
        PaceType = other.PaceType;
      }
      if (other.JerseyHash != 0) {
        JerseyHash = other.JerseyHash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 64: {
            Rules = input.ReadInt32();
            break;
          }
          case 176: {
            Route = input.ReadInt32();
            break;
          }
          case 200: {
            Laps = input.ReadInt32();
            break;
          }
          case 232: {
            StartLocation = input.ReadInt32();
            break;
          }
          case 240: {
            Label = input.ReadInt32();
            break;
          }
          case 248: {
            PaceType = input.ReadInt32();
            break;
          }
          case 288: {
            JerseyHash = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 64: {
            Rules = input.ReadInt32();
            break;
          }
          case 176: {
            Route = input.ReadInt32();
            break;
          }
          case 200: {
            Laps = input.ReadInt32();
            break;
          }
          case 232: {
            StartLocation = input.ReadInt32();
            break;
          }
          case 240: {
            Label = input.ReadInt32();
            break;
          }
          case 248: {
            PaceType = input.ReadInt32();
            break;
          }
          case 288: {
            JerseyHash = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RiderAttributes : pb::IMessage<RiderAttributes>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RiderAttributes> _parser = new pb::MessageParser<RiderAttributes>(() => new RiderAttributes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RiderAttributes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZwiftPacketMonitor.ZwiftMessagesReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RiderAttributes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RiderAttributes(RiderAttributes other) : this() {
      f2_ = other.f2_;
      f3_ = other.f3_;
      attributeMessage_ = other.attributeMessage_ != null ? other.attributeMessage_.Clone() : null;
      theirId_ = other.theirId_;
      f13_ = other.f13_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RiderAttributes Clone() {
      return new RiderAttributes(this);
    }

    /// <summary>Field number for the "f2" field.</summary>
    public const int F2FieldNumber = 2;
    private int f2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F2 {
      get { return f2_; }
      set {
        f2_ = value;
      }
    }

    /// <summary>Field number for the "f3" field.</summary>
    public const int F3FieldNumber = 3;
    private int f3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F3 {
      get { return f3_; }
      set {
        f3_ = value;
      }
    }

    /// <summary>Field number for the "attributeMessage" field.</summary>
    public const int AttributeMessageFieldNumber = 4;
    private global::ZwiftPacketMonitor.RiderAttributes.Types.AttributeMessage attributeMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ZwiftPacketMonitor.RiderAttributes.Types.AttributeMessage AttributeMessage {
      get { return attributeMessage_; }
      set {
        attributeMessage_ = value;
      }
    }

    /// <summary>Field number for the "theirId" field.</summary>
    public const int TheirIdFieldNumber = 10;
    private int theirId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TheirId {
      get { return theirId_; }
      set {
        theirId_ = value;
      }
    }

    /// <summary>Field number for the "f13" field.</summary>
    public const int F13FieldNumber = 13;
    private int f13_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int F13 {
      get { return f13_; }
      set {
        f13_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RiderAttributes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RiderAttributes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (F2 != other.F2) return false;
      if (F3 != other.F3) return false;
      if (!object.Equals(AttributeMessage, other.AttributeMessage)) return false;
      if (TheirId != other.TheirId) return false;
      if (F13 != other.F13) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (F2 != 0) hash ^= F2.GetHashCode();
      if (F3 != 0) hash ^= F3.GetHashCode();
      if (attributeMessage_ != null) hash ^= AttributeMessage.GetHashCode();
      if (TheirId != 0) hash ^= TheirId.GetHashCode();
      if (F13 != 0) hash ^= F13.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (F2 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(F2);
      }
      if (F3 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(F3);
      }
      if (attributeMessage_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(AttributeMessage);
      }
      if (TheirId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(TheirId);
      }
      if (F13 != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(F13);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (F2 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(F2);
      }
      if (F3 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(F3);
      }
      if (attributeMessage_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(AttributeMessage);
      }
      if (TheirId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(TheirId);
      }
      if (F13 != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(F13);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (F2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F2);
      }
      if (F3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F3);
      }
      if (attributeMessage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttributeMessage);
      }
      if (TheirId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TheirId);
      }
      if (F13 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(F13);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RiderAttributes other) {
      if (other == null) {
        return;
      }
      if (other.F2 != 0) {
        F2 = other.F2;
      }
      if (other.F3 != 0) {
        F3 = other.F3;
      }
      if (other.attributeMessage_ != null) {
        if (attributeMessage_ == null) {
          AttributeMessage = new global::ZwiftPacketMonitor.RiderAttributes.Types.AttributeMessage();
        }
        AttributeMessage.MergeFrom(other.AttributeMessage);
      }
      if (other.TheirId != 0) {
        TheirId = other.TheirId;
      }
      if (other.F13 != 0) {
        F13 = other.F13;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            F2 = input.ReadInt32();
            break;
          }
          case 24: {
            F3 = input.ReadInt32();
            break;
          }
          case 34: {
            if (attributeMessage_ == null) {
              AttributeMessage = new global::ZwiftPacketMonitor.RiderAttributes.Types.AttributeMessage();
            }
            input.ReadMessage(AttributeMessage);
            break;
          }
          case 80: {
            TheirId = input.ReadInt32();
            break;
          }
          case 104: {
            F13 = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 16: {
            F2 = input.ReadInt32();
            break;
          }
          case 24: {
            F3 = input.ReadInt32();
            break;
          }
          case 34: {
            if (attributeMessage_ == null) {
              AttributeMessage = new global::ZwiftPacketMonitor.RiderAttributes.Types.AttributeMessage();
            }
            input.ReadMessage(AttributeMessage);
            break;
          }
          case 80: {
            TheirId = input.ReadInt32();
            break;
          }
          case 104: {
            F13 = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the RiderAttributes message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class AttributeMessage : pb::IMessage<AttributeMessage>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AttributeMessage> _parser = new pb::MessageParser<AttributeMessage>(() => new AttributeMessage());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AttributeMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::ZwiftPacketMonitor.RiderAttributes.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeMessage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeMessage(AttributeMessage other) : this() {
          myId_ = other.myId_;
          theirId_ = other.theirId_;
          firstName_ = other.firstName_;
          lastName_ = other.lastName_;
          countryCode_ = other.countryCode_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AttributeMessage Clone() {
          return new AttributeMessage(this);
        }

        /// <summary>Field number for the "myId" field.</summary>
        public const int MyIdFieldNumber = 1;
        private int myId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MyId {
          get { return myId_; }
          set {
            myId_ = value;
          }
        }

        /// <summary>Field number for the "theirId" field.</summary>
        public const int TheirIdFieldNumber = 2;
        private int theirId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TheirId {
          get { return theirId_; }
          set {
            theirId_ = value;
          }
        }

        /// <summary>Field number for the "firstName" field.</summary>
        public const int FirstNameFieldNumber = 3;
        private string firstName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FirstName {
          get { return firstName_; }
          set {
            firstName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "lastName" field.</summary>
        public const int LastNameFieldNumber = 4;
        private string lastName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LastName {
          get { return lastName_; }
          set {
            lastName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "countryCode" field.</summary>
        public const int CountryCodeFieldNumber = 5;
        private int countryCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CountryCode {
          get { return countryCode_; }
          set {
            countryCode_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AttributeMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AttributeMessage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MyId != other.MyId) return false;
          if (TheirId != other.TheirId) return false;
          if (FirstName != other.FirstName) return false;
          if (LastName != other.LastName) return false;
          if (CountryCode != other.CountryCode) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (MyId != 0) hash ^= MyId.GetHashCode();
          if (TheirId != 0) hash ^= TheirId.GetHashCode();
          if (FirstName.Length != 0) hash ^= FirstName.GetHashCode();
          if (LastName.Length != 0) hash ^= LastName.GetHashCode();
          if (CountryCode != 0) hash ^= CountryCode.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (MyId != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(MyId);
          }
          if (TheirId != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(TheirId);
          }
          if (FirstName.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(FirstName);
          }
          if (LastName.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(LastName);
          }
          if (CountryCode != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(CountryCode);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (MyId != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(MyId);
          }
          if (TheirId != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(TheirId);
          }
          if (FirstName.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(FirstName);
          }
          if (LastName.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(LastName);
          }
          if (CountryCode != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(CountryCode);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (MyId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MyId);
          }
          if (TheirId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TheirId);
          }
          if (FirstName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstName);
          }
          if (LastName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(LastName);
          }
          if (CountryCode != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CountryCode);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AttributeMessage other) {
          if (other == null) {
            return;
          }
          if (other.MyId != 0) {
            MyId = other.MyId;
          }
          if (other.TheirId != 0) {
            TheirId = other.TheirId;
          }
          if (other.FirstName.Length != 0) {
            FirstName = other.FirstName;
          }
          if (other.LastName.Length != 0) {
            LastName = other.LastName;
          }
          if (other.CountryCode != 0) {
            CountryCode = other.CountryCode;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                MyId = input.ReadInt32();
                break;
              }
              case 16: {
                TheirId = input.ReadInt32();
                break;
              }
              case 26: {
                FirstName = input.ReadString();
                break;
              }
              case 34: {
                LastName = input.ReadString();
                break;
              }
              case 40: {
                CountryCode = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                MyId = input.ReadInt32();
                break;
              }
              case 16: {
                TheirId = input.ReadInt32();
                break;
              }
              case 26: {
                FirstName = input.ReadString();
                break;
              }
              case 34: {
                LastName = input.ReadString();
                break;
              }
              case 40: {
                CountryCode = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
